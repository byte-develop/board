{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Kanban Board Application\n\n## Overview\n\nThis is a modern Kanban board application built with React and Express.js that provides project management capabilities with advanced features like AI assistance, dark/light theme support, and comprehensive task management. The application follows a full-stack architecture with a TypeScript-based Express backend serving a React frontend with drag-and-drop functionality.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript using Vite as the build tool\n- **UI Framework**: Shadcn/ui components built on Radix UI primitives with Tailwind CSS styling\n- **State Management**: TanStack Query (React Query) for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **Drag & Drop**: Hello Pangea DnD (react-beautiful-dnd successor) for kanban board interactions\n- **Animations**: Framer Motion for smooth UI transitions and micro-interactions\n- **Styling**: Tailwind CSS with custom CSS variables for theming, glass morphism effects, and responsive design\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful API with structured error handling and request logging middleware\n- **Development Setup**: Vite middleware integration for hot module replacement in development\n- **Database Layer**: Abstracted storage interface allowing for multiple storage implementations (currently in-memory with database-ready structure)\n\n### Data Storage & Schema\n- **ORM**: Drizzle ORM configured for PostgreSQL with Neon Database serverless driver\n- **Schema Design**: Normalized relational structure with tables for boards, columns, tasks, dependencies, and comments\n- **Data Types**: UUID primary keys, timestamps for audit trails, arrays for tags, and enum-like fields for priority/status\n- **Database Features**: Support for task dependencies, comments, progress tracking, and due dates\n\n### Authentication & Session Management\n- **Session Store**: Connect-pg-simple for PostgreSQL-backed session storage\n- **Security**: Configured for production with secure session handling\n\n### Theme System\n- **Implementation**: React Context-based theme provider with localStorage persistence\n- **Styling**: CSS custom properties (variables) for seamless dark/light mode switching\n- **Components**: All UI components support both themes with automatic color adaptation\n\n### AI Integration\n- **Provider**: OpenAI API integration for intelligent task suggestions and workflow optimization\n- **Features**: Board analysis, task prioritization suggestions, deadline predictions, and workflow improvements\n- **Architecture**: Dedicated AI assistant component with suggestion categorization and action recommendations\n\n## External Dependencies\n\n### Core Frontend Libraries\n- **React Ecosystem**: React 18, React DOM, React Hook Form with Zod validation\n- **UI Components**: Radix UI primitives (dialogs, dropdowns, tooltips, etc.)\n- **Styling**: Tailwind CSS, class-variance-authority for component variants, clsx for conditional classes\n- **Drag & Drop**: @hello-pangea/dnd for kanban board functionality\n- **Animations**: Framer Motion for transitions and micro-interactions\n- **Date Handling**: date-fns for date formatting and manipulation\n\n### Backend Dependencies\n- **Server Framework**: Express.js with middleware for JSON parsing and URL encoding\n- **Database**: Drizzle ORM with @neondatabase/serverless driver for PostgreSQL\n- **Session Management**: express-session with connect-pg-simple store\n- **Validation**: Zod for runtime type checking and API validation\n- **AI Services**: OpenAI SDK for GPT integration\n\n### Development Tools\n- **Build System**: Vite with React plugin and TypeScript support\n- **Database Tools**: Drizzle Kit for schema migrations and database management\n- **Code Quality**: TypeScript for type safety, ESLint configuration via Replit tools\n- **Development Utilities**: tsx for running TypeScript files, esbuild for production bundling\n\n### Third-Party Services\n- **Database**: Neon Database (serverless PostgreSQL)\n- **AI Provider**: OpenAI API for intelligent suggestions\n- **Hosting**: Configured for Replit deployment with development banner integration\n- **Fonts**: Google Fonts (Inter, DM Sans, Fira Code, Geist Mono, Architects Daughter)\n\n### UI Enhancement Libraries\n- **Command Palette**: cmdk for search and command functionality\n- **Carousel**: Embla Carousel React for image/content carousels\n- **Charts**: Recharts for data visualization (configured but not actively used)\n- **Utilities**: nanoid for unique ID generation, lucide-react for icons","size_bytes":4742},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      fontFamily: {\n        sans: [\"Inter\", \"system-ui\", \"sans-serif\"],\n        serif: [\"Georgia\", \"serif\"],\n        mono: [\"Fira Code\", \"monospace\"],\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"fade-in\": {\n          \"0%\": {\n            opacity: \"0\",\n            transform: \"translateY(10px)\",\n          },\n          \"100%\": {\n            opacity: \"1\",\n            transform: \"translateY(0)\",\n          },\n        },\n        \"slide-up\": {\n          \"0%\": {\n            opacity: \"0\",\n            transform: \"translateY(20px)\",\n          },\n          \"100%\": {\n            opacity: \"1\",\n            transform: \"translateY(0)\",\n          },\n        },\n        \"glow-pulse\": {\n          \"0%, 100%\": {\n            boxShadow: \"0 0 20px rgba(59, 130, 246, 0.3)\",\n          },\n          \"50%\": {\n            boxShadow: \"0 0 30px rgba(59, 130, 246, 0.6)\",\n          },\n        },\n        shake: {\n          \"0%, 100%\": { transform: \"translateX(0)\" },\n          \"25%\": { transform: \"translateX(-2px)\" },\n          \"75%\": { transform: \"translateX(2px)\" },\n        },\n        float: {\n          \"0%, 100%\": { transform: \"translateY(0px)\" },\n          \"50%\": { transform: \"translateY(-10px)\" },\n        },\n        \"scale-in\": {\n          \"0%\": { transform: \"scale(0.95)\", opacity: \"0\" },\n          \"100%\": { transform: \"scale(1)\", opacity: \"1\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fade-in 0.5s ease-out\",\n        \"slide-up\": \"slide-up 0.3s ease-out\",\n        \"glow-pulse\": \"glow-pulse 2s ease-in-out infinite\",\n        shake: \"shake 0.5s ease-in-out\",\n        float: \"float 3s ease-in-out infinite\",\n        \"scale-in\": \"scale-in 0.2s ease-out\",\n      },\n      backdropBlur: {\n        xs: \"2px\",\n      },\n      boxShadow: {\n        \"glow-sm\": \"0 0 10px rgba(59, 130, 246, 0.3)\",\n        \"glow-md\": \"0 0 20px rgba(59, 130, 246, 0.4)\",\n        \"glow-lg\": \"0 0 30px rgba(59, 130, 246, 0.5)\",\n        \"card-hover\": \"0 20px 40px rgba(0, 0, 0, 0.1), 0 0 20px rgba(59, 130, 246, 0.2)\",\n        \"card-hover-dark\": \"0 20px 40px rgba(0, 0, 0, 0.3), 0 0 20px rgba(139, 92, 246, 0.3)\",\n      },\n      screens: {\n        \"3xl\": \"1920px\",\n      },\n      zIndex: {\n        \"60\": \"60\",\n        \"70\": \"70\",\n        \"80\": \"80\",\n        \"90\": \"90\",\n        \"100\": \"100\",\n      },\n    },\n  },\n  plugins: [\n    require(\"tailwindcss-animate\"), \n    require(\"@tailwindcss/typography\"),\n    function({ addUtilities }: any) {\n      addUtilities({\n        '.glass-effect': {\n          'backdrop-filter': 'blur(10px)',\n          'background': 'rgba(255, 255, 255, 0.1)',\n          'border': '1px solid rgba(255, 255, 255, 0.2)',\n        },\n        '.dark .glass-effect': {\n          'background': 'rgba(15, 23, 42, 0.3)',\n          'border': '1px solid rgba(100, 116, 139, 0.2)',\n        },\n        '.line-clamp-2': {\n          'display': '-webkit-box',\n          '-webkit-line-clamp': '2',\n          '-webkit-box-orient': 'vertical',\n          'overflow': 'hidden',\n        },\n        '.line-clamp-3': {\n          'display': '-webkit-box',\n          '-webkit-line-clamp': '3',\n          '-webkit-box-orient': 'vertical',\n          'overflow': 'hidden',\n        },\n      });\n    },\n  ],\n} satisfies Config;\n","size_bytes":5643},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport session from 'express-session';\nimport { registerRoutes } from \"./routes\";\nimport config from \"./config\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\n// Extend the Request type to include session\ndeclare module 'express-session' {\n  interface SessionData {\n    sessionId: string;\n  }\n}\n\nconst app = express();\n\n// CORS configuration\napp.use((req, res, next) => {\n  res.header('Access-Control-Allow-Origin', config.server.cors.origin.join(', '));\n  res.header('Access-Control-Allow-Credentials', 'true');\n  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');\n  \n  if (req.method === 'OPTIONS') {\n    res.sendStatus(200);\n  } else {\n    next();\n  }\n});\n\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: false, limit: '10mb' }));\n\n// Session configuration\napp.use(session({\n  secret: config.session.secret,\n  name: config.session.name,\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    maxAge: config.session.maxAge,\n    secure: config.session.secure,\n    httpOnly: config.session.httpOnly,\n    sameSite: config.session.sameSite as 'lax' | 'strict' | 'none'\n  }\n}));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":3133},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertTaskSchema, insertColumnSchema, insertCommentSchema, insertDependencySchema } from \"@shared/schema\";\nimport { registerSchema, loginSchema } from \"@shared/auth-schema\";\nimport { AuthService } from \"./auth\";\nimport OpenAI from \"openai\";\n\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY_ENV_VAR || \"\"\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Auth routes\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const validatedData = registerSchema.parse(req.body);\n      const user = await AuthService.register(\n        validatedData.email,\n        validatedData.password,\n        validatedData.firstName,\n        validatedData.lastName\n      );\n      \n      // Automatically log in after registration\n      const { user: loggedInUser, sessionId } = await AuthService.login(validatedData.email, validatedData.password);\n      \n      // Set session cookie\n      req.session.sessionId = sessionId;\n      \n      res.status(201).json({ user: loggedInUser });\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      res.status(400).json({ message: error instanceof Error ? error.message : \"Registration failed\" });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const validatedData = loginSchema.parse(req.body);\n      const { user, sessionId } = await AuthService.login(validatedData.email, validatedData.password);\n      \n      // Set session cookie\n      req.session.sessionId = sessionId;\n      \n      res.json({ user });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(401).json({ message: error instanceof Error ? error.message : \"Login failed\" });\n    }\n  });\n\n  app.get(\"/api/auth/me\", async (req, res) => {\n    try {\n      const sessionId = req.session.sessionId;\n      if (!sessionId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n      const user = await AuthService.getUserBySession(sessionId);\n      \n      if (!user) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n      \n      res.json({ user });\n    } catch (error) {\n      console.error(\"Get user error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", async (req, res) => {\n    try {\n      const sessionId = req.session.sessionId;\n      \n      if (sessionId) {\n        await AuthService.logout(sessionId);\n      }\n      \n      // Clear session\n      req.session.destroy((err: any) => {\n        if (err) {\n          console.error(\"Session destruction error:\", err);\n        }\n      });\n      \n      res.json({ message: \"Logged out successfully\" });\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n      res.status(500).json({ message: \"Logout failed\" });\n    }\n  });\n  \n  // Board routes\n  app.get(\"/api/boards\", async (req, res) => {\n    try {\n      const boards = await storage.getAllBoards();\n      res.json(boards);\n    } catch (error) {\n      res.status(500).json({ message: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  app.get(\"/api/boards/:id\", async (req, res) => {\n    try {\n      const board = await storage.getBoard(req.params.id);\n      if (!board) {\n        return res.status(404).json({ message: \"Board not found\" });\n      }\n      res.json(board);\n    } catch (error) {\n      res.status(500).json({ message: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  // Column routes\n  app.get(\"/api/boards/:boardId/columns\", async (req, res) => {\n    try {\n      const columns = await storage.getColumnsByBoardId(req.params.boardId);\n      res.json(columns);\n    } catch (error) {\n      res.status(500).json({ message: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  app.post(\"/api/columns\", async (req, res) => {\n    try {\n      const validatedData = insertColumnSchema.parse(req.body);\n      const column = await storage.createColumn(validatedData);\n      res.status(201).json(column);\n    } catch (error) {\n      res.status(400).json({ message: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  app.put(\"/api/columns/:id\", async (req, res) => {\n    try {\n      const updates = req.body;\n      const column = await storage.updateColumn(req.params.id, updates);\n      res.json(column);\n    } catch (error) {\n      res.status(400).json({ message: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  app.delete(\"/api/columns/:id\", async (req, res) => {\n    try {\n      await storage.deleteColumn(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  // Task routes\n  app.get(\"/api/columns/:columnId/tasks\", async (req, res) => {\n    try {\n      const tasks = await storage.getTasksByColumnId(req.params.columnId);\n      res.json(tasks);\n    } catch (error) {\n      res.status(500).json({ message: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  app.get(\"/api/tasks/:id\", async (req, res) => {\n    try {\n      const task = await storage.getTask(req.params.id);\n      if (!task) {\n        return res.status(404).json({ message: \"Task not found\" });\n      }\n      res.json(task);\n    } catch (error) {\n      res.status(500).json({ message: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  app.post(\"/api/tasks\", async (req, res) => {\n    try {\n      const validatedData = insertTaskSchema.parse(req.body);\n      const task = await storage.createTask(validatedData);\n      res.status(201).json(task);\n    } catch (error) {\n      res.status(400).json({ message: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  app.put(\"/api/tasks/:id\", async (req, res) => {\n    try {\n      const updates = req.body;\n      const task = await storage.updateTask(req.params.id, updates);\n      res.json(task);\n    } catch (error) {\n      res.status(400).json({ message: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  app.post(\"/api/tasks/:id/move\", async (req, res) => {\n    try {\n      const { columnId, position } = req.body;\n      const task = await storage.moveTask(req.params.id, columnId, position);\n      res.json(task);\n    } catch (error) {\n      res.status(400).json({ message: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  app.delete(\"/api/tasks/:id\", async (req, res) => {\n    try {\n      await storage.deleteTask(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  // Comment routes\n  app.get(\"/api/tasks/:taskId/comments\", async (req, res) => {\n    try {\n      const comments = await storage.getCommentsByTaskId(req.params.taskId);\n      res.json(comments);\n    } catch (error) {\n      res.status(500).json({ message: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  app.post(\"/api/comments\", async (req, res) => {\n    try {\n      const validatedData = insertCommentSchema.parse(req.body);\n      const comment = await storage.createComment(validatedData);\n      res.status(201).json(comment);\n    } catch (error) {\n      res.status(400).json({ message: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  // Dependency routes\n  app.get(\"/api/tasks/:taskId/dependencies\", async (req, res) => {\n    try {\n      const dependencies = await storage.getDependenciesByTaskId(req.params.taskId);\n      res.json(dependencies);\n    } catch (error) {\n      res.status(500).json({ message: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  app.post(\"/api/dependencies\", async (req, res) => {\n    try {\n      const validatedData = insertDependencySchema.parse(req.body);\n      const dependency = await storage.createDependency(validatedData);\n      res.status(201).json(dependency);\n    } catch (error) {\n      res.status(400).json({ message: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  // AI Assistant routes\n  app.post(\"/api/ai/suggestions\", async (req, res) => {\n    try {\n      const { boardId } = req.body;\n      \n      if (!openai.apiKey) {\n        return res.status(400).json({ message: \"OpenAI API key not configured\" });\n      }\n\n      const columns = await storage.getColumnsByBoardId(boardId);\n      const allTasks = [];\n      \n      for (const column of columns) {\n        const tasks = await storage.getTasksByColumnId(column.id);\n        allTasks.push(...tasks.map(task => ({ ...task, columnTitle: column.title })));\n      }\n\n      const prompt = `Analyze the following Kanban board data and provide optimization suggestions:\n\nColumns: ${columns.map(c => c.title).join(', ')}\n\nTasks:\n${allTasks.map(task => \n  `- ${task.title} (${task.columnTitle}, Priority: ${task.priority}, Progress: ${task.progress}%, Due: ${task.dueDate || 'No deadline'})`\n).join('\\n')}\n\nPlease provide suggestions in JSON format with the following structure:\n{\n  \"suggestions\": [\n    {\n      \"type\": \"priority\" | \"workflow\" | \"deadline\" | \"dependency\",\n      \"title\": \"Brief suggestion title\",\n      \"description\": \"Detailed explanation\",\n      \"taskId\": \"task-id-if-applicable\",\n      \"action\": \"specific action to take\"\n    }\n  ]\n}`;\n\n      // the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are an expert project management AI assistant that analyzes Kanban boards and provides actionable optimization suggestions.\"\n          },\n          {\n            role: \"user\",\n            content: prompt\n          }\n        ],\n        response_format: { type: \"json_object\" },\n        max_tokens: 1000,\n      });\n\n      const suggestions = JSON.parse(response.choices[0].message.content || \"{}\");\n      res.json(suggestions);\n    } catch (error) {\n      console.error(\"AI suggestion error:\", error);\n      res.status(500).json({ message: \"Failed to generate AI suggestions\" });\n    }\n  });\n\n  app.post(\"/api/ai/optimize-board\", async (req, res) => {\n    try {\n      const { boardId } = req.body;\n      \n      if (!openai.apiKey) {\n        return res.status(400).json({ message: \"OpenAI API key not configured\" });\n      }\n\n      const columns = await storage.getColumnsByBoardId(boardId);\n      const allTasks = [];\n      \n      for (const column of columns) {\n        const tasks = await storage.getTasksByColumnId(column.id);\n        allTasks.push(...tasks.map(task => ({ ...task, columnTitle: column.title })));\n      }\n\n      const prompt = `Analyze this Kanban board and suggest optimal task organization:\n\nCurrent state:\n${allTasks.map(task => \n  `- ${task.title}: ${task.columnTitle} (Priority: ${task.priority}, Progress: ${task.progress}%)`\n).join('\\n')}\n\nProvide optimization recommendations in JSON format:\n{\n  \"optimizations\": [\n    {\n      \"taskId\": \"task-id\",\n      \"currentColumn\": \"current-column-title\",\n      \"suggestedColumn\": \"suggested-column-title\",\n      \"reason\": \"explanation for the move\"\n    }\n  ]\n}`;\n\n      // the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are a workflow optimization AI that helps organize Kanban boards for maximum efficiency.\"\n          },\n          {\n            role: \"user\",\n            content: prompt\n          }\n        ],\n        response_format: { type: \"json_object\" },\n        max_tokens: 1000,\n      });\n\n      const optimizations = JSON.parse(response.choices[0].message.content || \"{}\");\n      res.json(optimizations);\n    } catch (error) {\n      console.error(\"Board optimization error:\", error);\n      res.status(500).json({ message: \"Failed to optimize board\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":12476},"server/storage.ts":{"content":"import { \n  type Board, type Column, type Task, type Dependency, type Comment,\n  type InsertBoard, type InsertColumn, type InsertTask, type InsertDependency, type InsertComment \n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Board operations\n  getBoard(id: string): Promise<Board | undefined>;\n  getAllBoards(): Promise<Board[]>;\n  createBoard(board: InsertBoard): Promise<Board>;\n  updateBoard(id: string, board: Partial<InsertBoard>): Promise<Board>;\n  deleteBoard(id: string): Promise<void>;\n  \n  // Column operations\n  getColumnsByBoardId(boardId: string): Promise<Column[]>;\n  createColumn(column: InsertColumn): Promise<Column>;\n  updateColumn(id: string, column: Partial<InsertColumn>): Promise<Column>;\n  deleteColumn(id: string): Promise<void>;\n  \n  // Task operations\n  getTasksByColumnId(columnId: string): Promise<Task[]>;\n  getTask(id: string): Promise<Task | undefined>;\n  createTask(task: InsertTask): Promise<Task>;\n  updateTask(id: string, task: Partial<InsertTask>): Promise<Task>;\n  deleteTask(id: string): Promise<void>;\n  moveTask(taskId: string, columnId: string, position: number): Promise<Task>;\n  \n  // Dependency operations\n  getDependenciesByTaskId(taskId: string): Promise<Dependency[]>;\n  createDependency(dependency: InsertDependency): Promise<Dependency>;\n  deleteDependency(id: string): Promise<void>;\n  \n  // Comment operations\n  getCommentsByTaskId(taskId: string): Promise<Comment[]>;\n  createComment(comment: InsertComment): Promise<Comment>;\n  deleteComment(id: string): Promise<void>;\n}\n\nexport class MemStorage implements IStorage {\n  private boards: Map<string, Board> = new Map();\n  private columns: Map<string, Column> = new Map();\n  private tasks: Map<string, Task> = new Map();\n  private dependencies: Map<string, Dependency> = new Map();\n  private comments: Map<string, Comment> = new Map();\n\n  constructor() {\n    this.initializeDefaultData();\n  }\n\n  private initializeDefaultData() {\n    // Create default board\n    const defaultBoard: Board = {\n      id: \"default-board\",\n      name: \"Hyper-Kanban\",\n      description: \"Interactive task management board\",\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.boards.set(defaultBoard.id, defaultBoard);\n\n    // Create default columns\n    const defaultColumns: Column[] = [\n      {\n        id: \"backlog\",\n        boardId: \"default-board\",\n        title: \"Backlog\",\n        position: 0,\n        color: \"#3b82f6\",\n        createdAt: new Date(),\n      },\n      {\n        id: \"in-progress\",\n        boardId: \"default-board\",\n        title: \"In Progress\",\n        position: 1,\n        color: \"#eab308\",\n        createdAt: new Date(),\n      },\n      {\n        id: \"review\",\n        boardId: \"default-board\",\n        title: \"Review\",\n        position: 2,\n        color: \"#f97316\",\n        createdAt: new Date(),\n      },\n      {\n        id: \"done\",\n        boardId: \"default-board\",\n        title: \"Done\",\n        position: 3,\n        color: \"#10b981\",\n        createdAt: new Date(),\n      },\n    ];\n\n    defaultColumns.forEach(column => {\n      this.columns.set(column.id, column);\n    });\n\n    // Create sample tasks\n    const sampleTasks: Task[] = [\n      {\n        id: \"task-1\",\n        columnId: \"backlog\",\n        title: \"Design new landing page\",\n        description: \"Create wireframes and mockups for the new company landing page\",\n        priority: \"high\",\n        status: \"backlog\",\n        progress: 0,\n        dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days from now\n        tags: [\"design\", \"ui/ux\"],\n        position: 0,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      {\n        id: \"task-2\",\n        columnId: \"backlog\",\n        title: \"Setup project database\",\n        description: \"Configure PostgreSQL database with initial tables\",\n        priority: \"medium\",\n        status: \"backlog\",\n        progress: 0,\n        dueDate: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000), // 3 days from now\n        tags: [\"backend\", \"database\"],\n        position: 1,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      {\n        id: \"task-3\",\n        columnId: \"in-progress\",\n        title: \"Implement user authentication\",\n        description: \"Add login/register functionality with JWT tokens\",\n        priority: \"high\",\n        status: \"in-progress\",\n        progress: 45,\n        dueDate: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000), // 5 days from now\n        tags: [\"backend\", \"auth\"],\n        position: 0,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      {\n        id: \"task-4\",\n        columnId: \"review\",\n        title: \"Code review for API endpoints\",\n        description: \"Review and test all REST API endpoints before deployment\",\n        priority: \"medium\",\n        status: \"review\",\n        progress: 90,\n        dueDate: new Date(Date.now() + 1 * 24 * 60 * 60 * 1000), // 1 day from now\n        tags: [\"review\", \"api\"],\n        position: 0,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      {\n        id: \"task-5\",\n        columnId: \"done\",\n        title: \"Project initialization\",\n        description: \"Setup basic project structure and dependencies\",\n        priority: \"low\",\n        status: \"done\",\n        progress: 100,\n        dueDate: null,\n        tags: [\"setup\"],\n        position: 0,\n        createdAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000), // 7 days ago\n        updatedAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000), // 5 days ago\n      },\n    ];\n\n    sampleTasks.forEach(task => {\n      this.tasks.set(task.id, task);\n    });\n  }\n\n  // Board operations\n  async getBoard(id: string): Promise<Board | undefined> {\n    return this.boards.get(id);\n  }\n\n  async getAllBoards(): Promise<Board[]> {\n    return Array.from(this.boards.values());\n  }\n\n  async createBoard(insertBoard: InsertBoard): Promise<Board> {\n    const id = randomUUID();\n    const board: Board = {\n      id,\n      name: insertBoard.name,\n      description: insertBoard.description || null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.boards.set(id, board);\n    return board;\n  }\n\n  async updateBoard(id: string, update: Partial<InsertBoard>): Promise<Board> {\n    const board = this.boards.get(id);\n    if (!board) throw new Error(\"Board not found\");\n    \n    const updatedBoard = { ...board, ...update, updatedAt: new Date() };\n    this.boards.set(id, updatedBoard);\n    return updatedBoard;\n  }\n\n  async deleteBoard(id: string): Promise<void> {\n    this.boards.delete(id);\n  }\n\n  // Column operations\n  async getColumnsByBoardId(boardId: string): Promise<Column[]> {\n    return Array.from(this.columns.values())\n      .filter(column => column.boardId === boardId)\n      .sort((a, b) => a.position - b.position);\n  }\n\n  async createColumn(insertColumn: InsertColumn): Promise<Column> {\n    const id = randomUUID();\n    const column: Column = {\n      id,\n      boardId: insertColumn.boardId,\n      title: insertColumn.title,\n      position: insertColumn.position,\n      color: insertColumn.color || \"#3b82f6\",\n      createdAt: new Date(),\n    };\n    this.columns.set(id, column);\n    return column;\n  }\n\n  async updateColumn(id: string, update: Partial<InsertColumn>): Promise<Column> {\n    const column = this.columns.get(id);\n    if (!column) throw new Error(\"Column not found\");\n    \n    const updatedColumn = { ...column, ...update };\n    this.columns.set(id, updatedColumn);\n    return updatedColumn;\n  }\n\n  async deleteColumn(id: string): Promise<void> {\n    this.columns.delete(id);\n    // Also delete tasks in this column\n    Array.from(this.tasks.values())\n      .filter(task => task.columnId === id)\n      .forEach(task => this.tasks.delete(task.id));\n  }\n\n  // Task operations\n  async getTasksByColumnId(columnId: string): Promise<Task[]> {\n    return Array.from(this.tasks.values())\n      .filter(task => task.columnId === columnId)\n      .sort((a, b) => a.position - b.position);\n  }\n\n  async getTask(id: string): Promise<Task | undefined> {\n    return this.tasks.get(id);\n  }\n\n  async createTask(insertTask: InsertTask): Promise<Task> {\n    const id = randomUUID();\n    const task: Task = {\n      id,\n      columnId: insertTask.columnId,\n      title: insertTask.title,\n      description: insertTask.description || null,\n      priority: insertTask.priority || \"medium\",\n      status: insertTask.status || \"backlog\",\n      progress: insertTask.progress || 0,\n      dueDate: insertTask.dueDate || null,\n      tags: insertTask.tags || [],\n      position: insertTask.position,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.tasks.set(id, task);\n    return task;\n  }\n\n  async updateTask(id: string, update: Partial<InsertTask>): Promise<Task> {\n    const task = this.tasks.get(id);\n    if (!task) throw new Error(\"Task not found\");\n    \n    const updatedTask = { ...task, ...update, updatedAt: new Date() };\n    this.tasks.set(id, updatedTask);\n    return updatedTask;\n  }\n\n  async deleteTask(id: string): Promise<void> {\n    this.tasks.delete(id);\n    // Also delete dependencies and comments\n    Array.from(this.dependencies.values())\n      .filter(dep => dep.fromTaskId === id || dep.toTaskId === id)\n      .forEach(dep => this.dependencies.delete(dep.id));\n    \n    Array.from(this.comments.values())\n      .filter(comment => comment.taskId === id)\n      .forEach(comment => this.comments.delete(comment.id));\n  }\n\n  async moveTask(taskId: string, columnId: string, position: number): Promise<Task> {\n    const task = this.tasks.get(taskId);\n    if (!task) throw new Error(\"Task not found\");\n    \n    const updatedTask = { ...task, columnId, position, updatedAt: new Date() };\n    this.tasks.set(taskId, updatedTask);\n    return updatedTask;\n  }\n\n  // Dependency operations\n  async getDependenciesByTaskId(taskId: string): Promise<Dependency[]> {\n    return Array.from(this.dependencies.values())\n      .filter(dep => dep.fromTaskId === taskId || dep.toTaskId === taskId);\n  }\n\n  async createDependency(insertDependency: InsertDependency): Promise<Dependency> {\n    const id = randomUUID();\n    const dependency: Dependency = {\n      ...insertDependency,\n      id,\n      createdAt: new Date(),\n    };\n    this.dependencies.set(id, dependency);\n    return dependency;\n  }\n\n  async deleteDependency(id: string): Promise<void> {\n    this.dependencies.delete(id);\n  }\n\n  // Comment operations\n  async getCommentsByTaskId(taskId: string): Promise<Comment[]> {\n    return Array.from(this.comments.values())\n      .filter(comment => comment.taskId === taskId)\n      .sort((a, b) => (a.createdAt?.getTime() || 0) - (b.createdAt?.getTime() || 0));\n  }\n\n  async createComment(insertComment: InsertComment): Promise<Comment> {\n    const id = randomUUID();\n    const comment: Comment = {\n      id,\n      taskId: insertComment.taskId,\n      content: insertComment.content,\n      author: insertComment.author || \"You\",\n      createdAt: new Date(),\n    };\n    this.comments.set(id, comment);\n    return comment;\n  }\n\n  async deleteComment(id: string): Promise<void> {\n    this.comments.delete(id);\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":11200},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, boolean, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const boards = pgTable(\"boards\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const columns = pgTable(\"columns\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  boardId: varchar(\"board_id\").notNull(),\n  title: text(\"title\").notNull(),\n  position: integer(\"position\").notNull(),\n  color: text(\"color\").notNull().default(\"#3b82f6\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const tasks = pgTable(\"tasks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  columnId: varchar(\"column_id\").notNull(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  priority: text(\"priority\").notNull().default(\"medium\"), // low, medium, high\n  status: text(\"status\").notNull().default(\"backlog\"), // backlog, in-progress, review, done\n  progress: integer(\"progress\").notNull().default(0), // 0-100\n  dueDate: timestamp(\"due_date\"),\n  tags: text(\"tags\").array().default([]),\n  position: integer(\"position\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const dependencies = pgTable(\"dependencies\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  fromTaskId: varchar(\"from_task_id\").notNull(),\n  toTaskId: varchar(\"to_task_id\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const comments = pgTable(\"comments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  taskId: varchar(\"task_id\").notNull(),\n  content: text(\"content\").notNull(),\n  author: text(\"author\").notNull().default(\"You\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertBoardSchema = createInsertSchema(boards).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertColumnSchema = createInsertSchema(columns).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertTaskSchema = createInsertSchema(tasks).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertDependencySchema = createInsertSchema(dependencies).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCommentSchema = createInsertSchema(comments).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type Board = typeof boards.$inferSelect;\nexport type Column = typeof columns.$inferSelect;\nexport type Task = typeof tasks.$inferSelect;\nexport type Dependency = typeof dependencies.$inferSelect;\nexport type Comment = typeof comments.$inferSelect;\n\nexport type InsertBoard = z.infer<typeof insertBoardSchema>;\nexport type InsertColumn = z.infer<typeof insertColumnSchema>;\nexport type InsertTask = z.infer<typeof insertTaskSchema>;\nexport type InsertDependency = z.infer<typeof insertDependencySchema>;\nexport type InsertComment = z.infer<typeof insertCommentSchema>;\n","size_bytes":3214},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/kanban/theme-provider\";\nimport { AuthProvider, useAuth } from \"@/components/auth/auth-provider\";\nimport { AuthPage } from \"@/components/auth/auth-page\";\nimport KanbanPage from \"@/pages/kanban\";\nimport NotFound from \"@/pages/not-found\";\nimport { motion } from \"framer-motion\";\n\nfunction AuthenticatedRouter() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={KanbanPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction AppContent() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen min-h-[100dvh] w-full flex items-center justify-center bg-gradient-to-br from-blue-50 via-white to-purple-50 dark:from-slate-900 dark:via-slate-800 dark:to-purple-900 relative\">\n        <motion.div\n          animate={{ rotate: 360 }}\n          transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n          className=\"w-12 h-12 border-4 border-blue-500/30 border-t-blue-500 rounded-full\"\n        />\n      </div>\n    );\n  }\n\n  return isAuthenticated ? <AuthenticatedRouter /> : <AuthPage />;\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <AuthProvider>\n            <Toaster />\n            <AppContent />\n          </AuthProvider>\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1723},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(220, 13%, 13%);\n  --card: hsl(210, 40%, 98%);\n  --card-foreground: hsl(220, 13%, 13%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(220, 13%, 13%);\n  --primary: hsl(221, 83%, 53%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(220, 13%, 13%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(220, 14%, 96%);\n  --muted-foreground: hsl(220, 13%, 13%);\n  --accent: hsl(220, 50%, 94%);\n  --accent-foreground: hsl(221, 83%, 53%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(220, 13%, 91%);\n  --input: hsl(220, 13%, 97%);\n  --ring: hsl(221, 83%, 53%);\n  --chart-1: hsl(221, 83%, 53%);\n  --chart-2: hsl(160, 100%, 36%);\n  --chart-3: hsl(43, 96%, 56%);\n  --chart-4: hsl(147, 78%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(210, 40%, 98%);\n  --sidebar-foreground: hsl(220, 13%, 13%);\n  --sidebar-primary: hsl(221, 83%, 53%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(220, 50%, 94%);\n  --sidebar-accent-foreground: hsl(221, 83%, 53%);\n  --sidebar-border: hsl(220, 13%, 91%);\n  --sidebar-ring: hsl(221, 83%, 53%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'Fira Code', monospace;\n  --radius: 0.5rem;\n  \n  /* Kanban-specific variables */\n  --glass-bg: hsla(0, 0%, 100%, 0.8);\n  --glass-border: hsla(220, 13%, 91%, 0.5);\n  --gradient-bg-light: linear-gradient(135deg, hsl(215, 100%, 96%) 0%, hsl(0, 0%, 100%) 50%, hsl(270, 100%, 97%) 100%);\n  --card-shadow: 0 4px 6px -1px hsla(221, 83%, 53%, 0.1), 0 2px 4px -1px hsla(221, 83%, 53%, 0.06);\n  --card-shadow-hover: 0 20px 40px hsla(0, 0%, 0%, 0.1), 0 0 20px hsla(221, 83%, 53%, 0.2);\n}\n\n.dark {\n  --background: hsl(224, 71%, 4%);\n  --foreground: hsl(213, 31%, 91%);\n  --card: hsl(224, 71%, 10%);\n  --card-foreground: hsl(213, 31%, 85%);\n  --popover: hsl(224, 71%, 4%);\n  --popover-foreground: hsl(213, 31%, 91%);\n  --primary: hsl(221, 83%, 53%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(215, 25%, 27%);\n  --secondary-foreground: hsl(213, 31%, 91%);\n  --muted: hsl(223, 47%, 11%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(216, 100%, 9%);\n  --accent-foreground: hsl(221, 83%, 53%);\n  --destructive: hsl(0, 62%, 30%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(216, 34%, 17%);\n  --input: hsl(216, 34%, 17%);\n  --ring: hsl(221, 83%, 53%);\n  --chart-1: hsl(221, 83%, 53%);\n  --chart-2: hsl(160, 100%, 36%);\n  --chart-3: hsl(43, 96%, 56%);\n  --chart-4: hsl(147, 78%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(224, 71%, 10%);\n  --sidebar-foreground: hsl(213, 31%, 85%);\n  --sidebar-primary: hsl(221, 83%, 53%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(216, 100%, 9%);\n  --sidebar-accent-foreground: hsl(221, 83%, 53%);\n  --sidebar-border: hsl(216, 34%, 17%);\n  --sidebar-ring: hsl(221, 83%, 53%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'Fira Code', monospace;\n  --radius: 0.5rem;\n  \n  /* Kanban-specific dark variables */\n  --glass-bg: hsla(224, 71%, 10%, 0.8);\n  --glass-border: hsla(216, 34%, 17%, 0.5);\n  --gradient-bg-dark: linear-gradient(135deg, hsl(224, 71%, 4%) 0%, hsl(224, 71%, 10%) 50%, hsl(271, 100%, 8%) 100%);\n  --card-shadow: 0 4px 6px -1px hsla(0, 0%, 0%, 0.3), 0 2px 4px -1px hsla(0, 0%, 0%, 0.2);\n  --card-shadow-hover: 0 20px 40px hsla(0, 0%, 0%, 0.3), 0 0 20px hsla(271, 91%, 65%, 0.3);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  \n  html {\n    height: 100%;\n    scroll-behavior: smooth;\n  }\n  \n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n    font-feature-settings: \"rlig\" 1, \"calt\" 1;\n    min-height: 100vh;\n    min-height: 100dvh; /* Dynamic viewport height for mobile */\n    height: 100%;\n    position: relative;\n  }\n  \n  #root {\n    min-height: 100vh;\n    min-height: 100dvh; /* Dynamic viewport height for mobile */\n    height: 100%;\n    width: 100%;\n    position: relative;\n  }\n}\n\n@layer components {\n  /* Glass morphism effect */\n  .glass-effect {\n    background: var(--glass-bg);\n    backdrop-filter: blur(10px);\n    border: 1px solid var(--glass-border);\n  }\n  \n  /* Smooth drag and drop */\n  [data-rbd-draggable-id] {\n    transition: none !important;\n    position: static !important;\n  }\n  \n  /* Mobile viewport fixes */\n  .mobile-scroll {\n    -webkit-overflow-scrolling: touch;\n    overflow-y: auto;\n  }\n  \n  /* Fix for mobile viewport height issues */\n  @supports (-webkit-touch-callout: none) {\n    .min-h-screen {\n      min-height: -webkit-fill-available;\n    }\n  }\n  \n  [data-rbd-draggable-id][data-rbd-drag-handle-draggable-id] {\n    cursor: grab;\n  }\n  \n  [data-rbd-draggable-id][data-rbd-drag-handle-draggable-id]:active {\n    cursor: grabbing;\n  }\n  \n  /* Fix positioning for scrollable containers */\n  [data-rbd-droppable-id] {\n    position: static !important;\n  }\n  \n  /* Ensure proper positioning calculation */\n  [data-rbd-drag-handle-context-id] {\n    position: relative;\n  }\n  \n  /* Card hover glow effect */\n  .card-hover-glow {\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n  \n  .card-hover-glow:hover {\n    box-shadow: var(--card-shadow-hover);\n  }\n  \n  /* Scrollbar styling */\n  .overflow-y-auto::-webkit-scrollbar {\n    width: 6px;\n  }\n  \n  .overflow-y-auto::-webkit-scrollbar-track {\n    @apply bg-transparent;\n  }\n  \n  .overflow-y-auto::-webkit-scrollbar-thumb {\n    @apply bg-gray-300 dark:bg-gray-600 rounded-full;\n  }\n  \n  .overflow-y-auto::-webkit-scrollbar-thumb:hover {\n    @apply bg-gray-400 dark:bg-gray-500;\n  }\n  \n  /* Line clamp utilities */\n  .line-clamp-2 {\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n  }\n}\n\n@layer utilities {\n  /* Custom animations */\n  @keyframes fade-in {\n    from {\n      opacity: 0;\n      transform: translateY(10px);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n  \n  @keyframes slide-up {\n    from {\n      opacity: 0;\n      transform: translateY(20px);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n  \n  @keyframes glow-pulse {\n    0%, 100% {\n      box-shadow: 0 0 20px hsla(221, 83%, 53%, 0.3);\n    }\n    50% {\n      box-shadow: 0 0 30px hsla(221, 83%, 53%, 0.6);\n    }\n  }\n  \n  @keyframes shake {\n    0%, 100% { transform: translateX(0); }\n    25% { transform: translateX(-2px); }\n    75% { transform: translateX(2px); }\n  }\n  \n  .animate-fade-in {\n    animation: fade-in 0.5s ease-out;\n  }\n  \n  .animate-slide-up {\n    animation: slide-up 0.3s ease-out;\n  }\n  \n  .animate-glow-pulse {\n    animation: glow-pulse 2s ease-in-out infinite;\n  }\n  \n  .animate-shake {\n    animation: shake 0.5s ease-in-out;\n  }\n  \n  /* Backdrop effects */\n  .backdrop-blur-sm {\n    backdrop-filter: blur(4px);\n  }\n  \n  .backdrop-blur-md {\n    backdrop-filter: blur(12px);\n  }\n  \n  /* Gradient text */\n  .gradient-text {\n    background: linear-gradient(135deg, hsl(221, 83%, 53%), hsl(271, 91%, 65%));\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n}\n\n/* Focus visible improvements */\n.focus-visible\\:ring-2:focus-visible {\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n  box-shadow: 0 0 0 2px hsl(var(--ring));\n}\n\n/* Improved transitions - exclude drag elements */\n*:not([data-rbd-draggable-id]):not([data-rbd-drag-handle-draggable-id]):not([data-rbd-droppable-id]) {\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n/* Disable all transforms and transitions during drag */\n[data-rbd-drag-handle-context-id] * {\n  transition: none !important;\n}\n\n/* Simple drag cursor styling */\n[data-rbd-drag-handle-draggable-id] {\n  cursor: grab !important;\n}\n\n[data-rbd-drag-handle-draggable-id]:active {\n  cursor: grabbing !important;\n}\n\n/* Smooth dragging - reduce jankiness */\n[data-rbd-draggable-id] {\n  transition: none !important;\n}\n\n/* Ensure smooth drag animations */\n[data-rbd-draggable-id] * {\n  transition: none !important;\n}\n\n/* Mobile-first responsive design */\n@media (max-width: 640px) {\n  /* Mobile optimizations */\n  body {\n    -webkit-text-size-adjust: 100%;\n    -webkit-tap-highlight-color: transparent;\n    touch-action: manipulation;\n  }\n  \n  /* Improve touch targets */\n  button, [role=\"button\"] {\n    min-height: 44px;\n    min-width: 44px;\n    touch-action: manipulation;\n  }\n  \n  /* Better scrolling on mobile */\n  .mobile-scroll {\n    -webkit-overflow-scrolling: touch;\n    scroll-behavior: smooth;\n  }\n  \n  /* Prevent zoom on input focus */\n  input, select, textarea {\n    font-size: 16px;\n  }\n  \n  /* Mobile-specific card spacing */\n  .task-card-mobile {\n    margin-bottom: 12px;\n    padding: 16px;\n    border-radius: 12px;\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n  }\n  \n  /* Sticky header on mobile */\n  .mobile-header {\n    position: sticky;\n    top: 0;\n    z-index: 50;\n    backdrop-filter: blur(12px);\n  }\n}\n\n/* Tablet optimizations */\n@media (min-width: 641px) and (max-width: 1024px) {\n  /* Tablet-specific layout */\n  .tablet-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n    gap: 1.5rem;\n  }\n  \n  /* Touch-friendly buttons on tablet */\n  button {\n    min-height: 40px;\n    touch-action: manipulation;\n  }\n}\n\n/* Desktop optimizations */\n@media (min-width: 1025px) {\n  /* Hover effects only on desktop */\n  .desktop-hover:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);\n  }\n  \n  /* Better scrollbars on desktop */\n  .custom-scrollbar::-webkit-scrollbar {\n    width: 8px;\n    height: 8px;\n  }\n  \n  .custom-scrollbar::-webkit-scrollbar-track {\n    background: rgba(0, 0, 0, 0.05);\n    border-radius: 4px;\n  }\n  \n  .custom-scrollbar::-webkit-scrollbar-thumb {\n    background: rgba(0, 0, 0, 0.2);\n    border-radius: 4px;\n  }\n  \n  .custom-scrollbar::-webkit-scrollbar-thumb:hover {\n    background: rgba(0, 0, 0, 0.3);\n  }\n}\n\n/* Enhanced animations for better performance */\n@media (prefers-reduced-motion: no-preference) {\n  .smooth-animation {\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n  \n  .bounce-animation {\n    animation: bounce 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55);\n  }\n  \n  @keyframes bounce {\n    0% { transform: scale(0.95) translateY(10px); opacity: 0; }\n    50% { transform: scale(1.02) translateY(-2px); opacity: 0.8; }\n    100% { transform: scale(1) translateY(0); opacity: 1; }\n  }\n}\n\n/* High contrast mode support */\n@media (prefers-contrast: high) {\n  .card-border {\n    border-width: 2px;\n    border-color: currentColor;\n  }\n  \n  .text-muted {\n    opacity: 0.8;\n  }\n}\n\n/* Dark mode improvements */\n.dark {\n  --shadow-color: rgba(0, 0, 0, 0.5);\n  --glow-color: rgba(255, 255, 255, 0.1);\n}\n\n.dark .dark-glow {\n  box-shadow: 0 0 20px var(--glow-color);\n}\n\n/* Better dark mode gradients on mobile */\n@media (max-width: 640px) {\n  .dark {\n    background: linear-gradient(135deg, #0f172a 0%, #1e293b 50%, #334155 100%) !important;\n  }\n  \n  .dark .mobile-header {\n    background: rgba(15, 23, 42, 0.9) !important;\n    backdrop-filter: blur(16px);\n  }\n  \n  .dark .mobile-scroll {\n    background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);\n  }\n}\n\n/* Focus improvements for accessibility */\n*:focus-visible {\n  outline: 2px solid rgb(59 130 246);\n  outline-offset: 2px;\n  border-radius: 4px;\n}\n\n/* Better mobile menu */\n@media (max-width: 640px) {\n  .mobile-menu {\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: rgba(0, 0, 0, 0.5);\n    backdrop-filter: blur(8px);\n    z-index: 9999;\n  }\n  \n  .mobile-menu-content {\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    background: white;\n    border-radius: 20px 20px 0 0;\n    padding: 24px;\n    transform: translateY(100%);\n    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n  \n  .dark .mobile-menu-content {\n    background: #1e293b;\n  }\n  \n  .mobile-menu-content.open {\n    transform: translateY(0);\n  }\n}\n\n/* Print styles */\n@media print {\n  .no-print {\n    display: none !important;\n  }\n}\n","size_bytes":12293},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/kanban.tsx":{"content":"import { KanbanBoard } from \"@/components/kanban/kanban-board\";\n\nexport default function KanbanPage() {\n  return <KanbanBoard />;\n}\n","size_bytes":132},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/kanban/ai-assistant.tsx":{"content":"import { useState } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Bot, X, Lightbulb, TrendingUp, Clock, Sparkles } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface AiAssistantProps {\n  isOpen: boolean;\n  onClose: () => void;\n  boardId: string;\n}\n\ninterface Suggestion {\n  type: \"priority\" | \"workflow\" | \"deadline\" | \"dependency\";\n  title: string;\n  description: string;\n  taskId?: string;\n  action: string;\n}\n\nconst suggestionIcons = {\n  priority: Lightbulb,\n  workflow: TrendingUp,\n  deadline: Clock,\n  dependency: Sparkles,\n};\n\nconst suggestionColors = {\n  priority: \"from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 border-blue-500\",\n  workflow: \"from-emerald-50 to-green-50 dark:from-emerald-900/20 dark:to-green-900/20 border-emerald-500\",\n  deadline: \"from-yellow-50 to-orange-50 dark:from-yellow-900/20 dark:to-orange-900/20 border-yellow-500\",\n  dependency: \"from-purple-50 to-violet-50 dark:from-purple-900/20 dark:to-violet-900/20 border-purple-500\",\n};\n\nexport function AiAssistant({ isOpen, onClose, boardId }: AiAssistantProps) {\n  const [suggestions, setSuggestions] = useState<Suggestion[]>([]);\n  const { toast } = useToast();\n\n  const getSuggestionsMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/ai/suggestions\", { boardId });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setSuggestions(data.suggestions || []);\n    },\n    onError: () => {\n      toast({\n        title: \"AI suggestions unavailable\",\n        description: \"Please check your OpenAI API configuration\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const optimizeBoardMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/ai/optimize-board\", { boardId });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Board optimization complete\",\n        description: `Generated ${data.optimizations?.length || 0} optimization suggestions`,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Optimization failed\",\n        description: \"Please check your OpenAI API configuration\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleGetSuggestions = () => {\n    getSuggestionsMutation.mutate();\n  };\n\n  const handleOptimizeBoard = () => {\n    optimizeBoardMutation.mutate();\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20, scale: 0.95 }}\n      animate={{ opacity: 1, y: 0, scale: 1 }}\n      exit={{ opacity: 0, y: 20, scale: 0.95 }}\n      transition={{ type: \"spring\", stiffness: 300, damping: 30 }}\n      className=\"fixed bottom-6 right-6 z-50 w-80 max-h-96\"\n    >\n      <Card className=\"bg-white/95 dark:bg-slate-800/95 backdrop-blur-md shadow-2xl border-gray-200/50 dark:border-slate-700/50 overflow-hidden\">\n        <CardHeader className=\"pb-3\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-gradient-to-r from-purple-500 to-pink-500 rounded-lg flex items-center justify-center\">\n                <Bot className=\"w-4 h-4 text-white\" />\n              </div>\n              <div>\n                <CardTitle className=\"text-sm\">AI Assistant</CardTitle>\n                <p className=\"text-xs text-gray-500 dark:text-gray-400\">Task optimization suggestions</p>\n              </div>\n            </div>\n            <Button variant=\"ghost\" size=\"sm\" onClick={onClose} className=\"h-8 w-8 p-0\">\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </CardHeader>\n\n        <CardContent className=\"space-y-3 max-h-64 overflow-y-auto\">\n          {suggestions.length === 0 ? (\n            <div className=\"text-center py-4\">\n              <Bot className=\"w-12 h-12 text-gray-400 mx-auto mb-2\" />\n              <p className=\"text-sm text-gray-500 dark:text-gray-400 mb-3\">\n                Get AI-powered suggestions to optimize your board\n              </p>\n              <Button\n                onClick={handleGetSuggestions}\n                disabled={getSuggestionsMutation.isPending}\n                size=\"sm\"\n                className=\"w-full\"\n              >\n                {getSuggestionsMutation.isPending ? (\n                  <motion.div\n                    animate={{ rotate: 360 }}\n                    transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n                    className=\"w-4 h-4 border-2 border-white/30 border-t-white rounded-full\"\n                  />\n                ) : (\n                  <>\n                    <Sparkles className=\"w-4 h-4 mr-2\" />\n                    Get Suggestions\n                  </>\n                )}\n              </Button>\n            </div>\n          ) : (\n            <AnimatePresence>\n              {suggestions.map((suggestion, index) => {\n                const Icon = suggestionIcons[suggestion.type];\n                return (\n                  <motion.div\n                    key={index}\n                    initial={{ opacity: 0, x: -20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ delay: index * 0.1 }}\n                    className={`bg-gradient-to-r rounded-lg p-3 border-l-2 ${\n                      suggestionColors[suggestion.type]\n                    }`}\n                  >\n                    <div className=\"flex items-start space-x-2\">\n                      <Icon className=\"w-4 h-4 mt-0.5 text-current\" />\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm font-medium text-gray-900 dark:text-white mb-1\">\n                          {suggestion.title}\n                        </p>\n                        <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                          {suggestion.description}\n                        </p>\n                      </div>\n                    </div>\n                  </motion.div>\n                );\n              })}\n            </AnimatePresence>\n          )}\n        </CardContent>\n\n        {suggestions.length > 0 && (\n          <div className=\"p-4 border-t border-gray-200/50 dark:border-slate-700/50\">\n            <Button\n              onClick={handleOptimizeBoard}\n              disabled={optimizeBoardMutation.isPending}\n              className=\"w-full bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600\"\n              size=\"sm\"\n            >\n              {optimizeBoardMutation.isPending ? (\n                <motion.div\n                  animate={{ rotate: 360 }}\n                  transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n                  className=\"w-4 h-4 border-2 border-white/30 border-t-white rounded-full mr-2\"\n                />\n              ) : (\n                <Sparkles className=\"w-4 h-4 mr-2\" />\n              )}\n              Optimize Board Layout\n            </Button>\n          </div>\n        )}\n      </Card>\n    </motion.div>\n  );\n}\n","size_bytes":7344},"client/src/components/kanban/kanban-board.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useAuth } from \"@/components/auth/auth-provider\";\nimport { DragDropContext, Droppable, DropResult } from \"@hello-pangea/dnd\";\nimport { Plus, Search, Sun, Moon, Bot, Map, X, Kanban, LogOut } from \"lucide-react\";\nimport { KanbanColumn } from \"./kanban-column\";\nimport { TaskModal } from \"./task-modal\";\nimport { CreateTaskModal } from \"./create-task-modal\";\nimport { CreateColumnModal } from \"./create-column-modal\";\nimport { AiAssistant } from \"./ai-assistant\";\nimport { MiniMap } from \"./mini-map\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useTheme } from \"./theme-provider\";\nimport type { Column, Task } from \"@shared/schema\";\n\nexport function KanbanBoard() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedTask, setSelectedTask] = useState<Task | null>(null);\n  const [isTaskModalOpen, setIsTaskModalOpen] = useState(false);\n  const [isCreateTaskModalOpen, setIsCreateTaskModalOpen] = useState(false);\n  const [isCreateColumnModalOpen, setIsCreateColumnModalOpen] = useState(false);\n  const [createTaskColumnId, setCreateTaskColumnId] = useState<string>(\"\");\n  const [isAiAssistantOpen, setIsAiAssistantOpen] = useState(false);\n  const [isMiniMapOpen, setIsMiniMapOpen] = useState(false);\n  const [isMobileSearchOpen, setIsMobileSearchOpen] = useState(false);\n  const [isMobileStatsOpen, setIsMobileStatsOpen] = useState(false);\n  const { theme, toggleTheme } = useTheme();\n  const { user, logout } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const boardId = \"default-board\";\n\n  // Fetch columns\n  const { data: columns = [], isLoading: columnsLoading } = useQuery<Column[]>({\n    queryKey: [\"/api/boards\", boardId, \"columns\"],\n  });\n\n  // Fetch tasks for all columns\n  const { data: allTasks = [], isLoading: tasksLoading } = useQuery<Task[]>({\n    queryKey: [\"/api/columns\", \"tasks\"],\n    queryFn: async () => {\n      const allTasks: Task[] = [];\n      for (const column of columns) {\n        const response = await fetch(`/api/columns/${column.id}/tasks`);\n        if (response.ok) {\n          const tasks = await response.json();\n          allTasks.push(...tasks);\n        }\n      }\n      return allTasks;\n    },\n    enabled: columns.length > 0,\n  });\n\n  // Group tasks by column and sort by position\n  const tasksByColumn = allTasks.reduce((acc: Record<string, Task[]>, task: Task) => {\n    if (!acc[task.columnId]) {\n      acc[task.columnId] = [];\n    }\n    acc[task.columnId].push(task);\n    return acc;\n  }, {});\n\n  // Sort tasks by position within each column\n  Object.keys(tasksByColumn).forEach(columnId => {\n    tasksByColumn[columnId].sort((a, b) => a.position - b.position);\n  });\n\n  // Filter tasks based on search query and maintain position sorting\n  const filteredTasksByColumn = Object.keys(tasksByColumn).reduce((acc: Record<string, Task[]>, columnId) => {\n    acc[columnId] = tasksByColumn[columnId]\n      .filter(task =>\n        task.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        task.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        task.tags?.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()))\n      )\n      .sort((a, b) => a.position - b.position);\n    return acc;\n  }, {});\n\n  // Mutations\n  const moveTaskMutation = useMutation({\n    mutationFn: async ({ taskId, columnId, position }: { taskId: string; columnId: string; position: number }) => {\n      // Also update the status to match the column\n      let status = \"backlog\";\n      if (columnId === \"in-progress\") status = \"in-progress\";\n      else if (columnId === \"review\") status = \"review\";\n      else if (columnId === \"done\") status = \"done\";\n      \n      const response = await apiRequest(\"POST\", `/api/tasks/${taskId}/move`, { columnId, position });\n      \n      // Update status to match new column\n      await apiRequest(\"PUT\", `/api/tasks/${taskId}`, { status });\n      \n      return response.json();\n    },\n    // Простое оптимистичное обновление\n    onMutate: async ({ taskId, columnId, position }) => {\n      // Отменяем любые исходящие refetch запросы\n      await queryClient.cancelQueries({ queryKey: [\"/api/columns\", \"tasks\"] });\n      \n      // Получаем текущие данные\n      const previousTasks = queryClient.getQueryData<Task[]>([\"/api/columns\", \"tasks\"]);\n      \n      if (previousTasks) {\n        let status = \"backlog\";\n        if (columnId === \"in-progress\") status = \"in-progress\";\n        else if (columnId === \"review\") status = \"review\";\n        else if (columnId === \"done\") status = \"done\";\n\n        // Просто обновляем задачу с новыми данными\n        const updatedTasks = previousTasks.map(task => {\n          if (task.id === taskId) {\n            return { ...task, columnId, position, status };\n          }\n          return task;\n        });\n        \n        // Устанавливаем обновлённые данные\n        queryClient.setQueryData([\"/api/columns\", \"tasks\"], updatedTasks);\n      }\n      \n      // Возвращаем контекст для rollback в случае ошибки\n      return { previousTasks };\n    },\n    onSuccess: () => {\n      // Обновляем данные с сервера для синхронизации\n      queryClient.invalidateQueries({ queryKey: [\"/api/columns\", \"tasks\"] });\n    },\n    onError: (err, variables, context) => {\n      // Откатываем изменения в случае ошибки\n      if (context?.previousTasks) {\n        queryClient.setQueryData([\"/api/columns\", \"tasks\"], context.previousTasks);\n      }\n      toast({ title: \"Failed to move task\", variant: \"destructive\" });\n    },\n  });\n\n  const createTaskMutation = useMutation({\n    mutationFn: async (taskData: { columnId: string; title: string; description?: string; priority: string }) => {\n      const tasks = tasksByColumn[taskData.columnId] || [];\n      const position = tasks.length;\n      \n      const response = await apiRequest(\"POST\", \"/api/tasks\", {\n        columnId: taskData.columnId,\n        title: taskData.title,\n        description: taskData.description || \"\",\n        priority: taskData.priority,\n        status: \"backlog\",\n        progress: 0,\n        position,\n        tags: [],\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/columns\", \"tasks\"] });\n      toast({ title: \"Task created successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to create task\", variant: \"destructive\" });\n    },\n  });\n\n  const createColumnMutation = useMutation({\n    mutationFn: async (title: string) => {\n      const response = await apiRequest(\"POST\", \"/api/columns\", {\n        boardId,\n        title,\n        position: columns.length,\n        color: \"#6366f1\",\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/boards\", boardId, \"columns\"] });\n      toast({ title: \"Column created successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to create column\", variant: \"destructive\" });\n    },\n  });\n\n  const handleDragEnd = (result: DropResult) => {\n    const { destination, source, draggableId } = result;\n\n    if (!destination) return;\n\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n\n    moveTaskMutation.mutate({\n      taskId: draggableId,\n      columnId: destination.droppableId,\n      position: destination.index,\n    });\n  };\n\n  const handleAddTask = (columnId: string) => {\n    setCreateTaskColumnId(columnId);\n    setIsCreateTaskModalOpen(true);\n  };\n\n  const handleEditTask = (task: Task) => {\n    setSelectedTask(task);\n    setIsTaskModalOpen(true);\n  };\n\n  const handleSaveTask = (updatedTask: Task) => {\n    setIsTaskModalOpen(false);\n    setSelectedTask(null);\n  };\n\n  const handleDeleteTask = (taskId: string) => {\n    setIsTaskModalOpen(false);\n    setSelectedTask(null);\n  };\n\n  const handleAddColumn = () => {\n    setIsCreateColumnModalOpen(true);\n  };\n\n  const handleCreateTask = (taskData: { title: string; description?: string; priority: string; columnId: string; }) => {\n    createTaskMutation.mutate(taskData);\n  };\n\n  const handleCreateColumn = (title: string) => {\n    createColumnMutation.mutate(title);\n  };\n\n  // Keyboard shortcuts\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if ((e.ctrlKey || e.metaKey) && e.key === \"d\") {\n        e.preventDefault();\n        toggleTheme();\n      }\n      if ((e.ctrlKey || e.metaKey) && e.key === \"k\") {\n        e.preventDefault();\n        setIsAiAssistantOpen(!isAiAssistantOpen);\n      }\n      if (e.key === \"Escape\") {\n        setIsTaskModalOpen(false);\n        setIsCreateTaskModalOpen(false);\n        setIsCreateColumnModalOpen(false);\n        setIsAiAssistantOpen(false);\n        setIsMiniMapOpen(false);\n      }\n    };\n\n    document.addEventListener(\"keydown\", handleKeyDown);\n    return () => document.removeEventListener(\"keydown\", handleKeyDown);\n  }, [toggleTheme, isAiAssistantOpen]);\n\n  // Calculate stats based on actual column placement\n  const stats = {\n    backlog: (tasksByColumn['backlog'] || []).length,\n    inProgress: (tasksByColumn['in-progress'] || []).length,\n    review: (tasksByColumn['review'] || []).length,\n    done: (tasksByColumn['done'] || []).length,\n    get total() {\n      return this.backlog + this.inProgress + this.review + this.done;\n    }\n  };\n\n  if (columnsLoading || tasksLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <motion.div\n          animate={{ rotate: 360 }}\n          transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n          className=\"w-8 h-8 border-2 border-blue-500/30 border-t-blue-500 rounded-full\"\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex flex-col min-h-screen min-h-[100dvh] w-full bg-gradient-to-br from-blue-50 via-white to-purple-50 dark:from-slate-900 dark:via-slate-800 dark:to-purple-900 transition-all duration-500 mobile-scroll relative\">\n      {/* Header */}\n      <header className=\"mobile-header bg-white/90 dark:bg-slate-800/90 backdrop-blur-xl border-b border-gray-200/60 dark:border-slate-700/60 px-4 sm:px-6 py-3 sm:py-4 shadow-sm\">\n        <div className=\"flex items-center justify-between max-w-7xl mx-auto\">\n          <div className=\"flex items-center space-x-3 sm:space-x-6 flex-1\">\n            <div className=\"flex items-center space-x-2 sm:space-x-3\">\n              <div className=\"w-8 h-8 sm:w-10 sm:h-10 bg-gradient-to-br from-indigo-500 via-blue-600 to-cyan-500 rounded-xl flex items-center justify-center shadow-lg shadow-indigo-500/25 dark:shadow-cyan-500/25\">\n                <Kanban className=\"text-white w-4 h-4 sm:w-5 sm:h-5\" />\n              </div>\n              <div className=\"min-w-0\">\n                <h1 className=\"text-lg sm:text-xl font-bold bg-gradient-to-r from-gray-900 to-gray-700 dark:from-white dark:to-gray-300 bg-clip-text text-transparent truncate\">\n                  TaskFlow Pro\n                </h1>\n                <p className=\"text-xs text-gray-500 dark:text-gray-400 -mt-0.5 hidden sm:block\">Smart Project Management</p>\n              </div>\n            </div>\n            \n            {/* Board Statistics - Hidden on mobile, shows on tablet+ */}\n            <div className=\"hidden xl:flex items-center space-x-1 ml-4 bg-gray-50/80 dark:bg-slate-700/30 rounded-2xl px-3 py-2 border border-gray-200/50 dark:border-slate-600/50\">\n              <div className=\"flex items-center space-x-2 px-2 py-1 rounded-lg bg-blue-50/80 dark:bg-blue-900/20 border border-blue-200/50 dark:border-blue-700/50\">\n                <div className=\"w-2 h-2 bg-blue-500 rounded-full shadow-sm shadow-blue-500/50\"></div>\n                <span className=\"text-xs font-medium text-blue-700 dark:text-blue-300\">Backlog</span>\n                <span className=\"text-xs font-bold text-blue-900 dark:text-blue-100 bg-blue-100/80 dark:bg-blue-800/50 px-1.5 py-0.5 rounded min-w-[20px] text-center\">{stats.backlog}</span>\n              </div>\n              <div className=\"flex items-center space-x-2 px-2 py-1 rounded-lg bg-amber-50/80 dark:bg-amber-900/20 border border-amber-200/50 dark:border-amber-700/50\">\n                <div className=\"w-2 h-2 bg-amber-500 rounded-full shadow-sm shadow-amber-500/50\"></div>\n                <span className=\"text-xs font-medium text-amber-700 dark:text-amber-300\">Active</span>\n                <span className=\"text-xs font-bold text-amber-900 dark:text-amber-100 bg-amber-100/80 dark:bg-amber-800/50 px-1.5 py-0.5 rounded min-w-[20px] text-center\">{stats.inProgress}</span>\n              </div>\n              <div className=\"flex items-center space-x-2 px-2 py-1 rounded-lg bg-orange-50/80 dark:bg-orange-900/20 border border-orange-200/50 dark:border-orange-700/50\">\n                <div className=\"w-2 h-2 bg-orange-500 rounded-full shadow-sm shadow-orange-500/50\"></div>\n                <span className=\"text-xs font-medium text-orange-700 dark:text-orange-300\">Review</span>\n                <span className=\"text-xs font-bold text-orange-900 dark:text-orange-100 bg-orange-100/80 dark:bg-orange-800/50 px-1.5 py-0.5 rounded min-w-[20px] text-center\">{stats.review}</span>\n              </div>\n              <div className=\"flex items-center space-x-2 px-2 py-1 rounded-lg bg-emerald-50/80 dark:bg-emerald-900/20 border border-emerald-200/50 dark:border-emerald-700/50\">\n                <div className=\"w-2 h-2 bg-emerald-500 rounded-full shadow-sm shadow-emerald-500/50\"></div>\n                <span className=\"text-xs font-medium text-emerald-700 dark:text-emerald-300\">Done</span>\n                <span className=\"text-xs font-bold text-emerald-900 dark:text-emerald-100 bg-emerald-100/80 dark:bg-emerald-800/50 px-1.5 py-0.5 rounded min-w-[20px] text-center\">{stats.done}</span>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-2 sm:space-x-4\">\n            {/* Search - Hidden on mobile, shows on larger screens */}\n            <div className=\"relative hidden lg:block\">\n              <Input\n                type=\"text\"\n                placeholder=\"Search tasks...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-11 pr-4 w-48 xl:w-72 bg-white/80 dark:bg-slate-700/80 border-gray-200/60 dark:border-slate-600/60 focus:bg-white dark:focus:bg-slate-600 focus:border-blue-400 dark:focus:border-purple-400 focus:ring-2 focus:ring-blue-400/20 dark:focus:ring-purple-400/20 rounded-xl shadow-sm placeholder:text-gray-400 dark:placeholder:text-gray-500\"\n              />\n              <Search className=\"absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n            </div>\n            \n            {/* Mobile search button */}\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setIsMobileSearchOpen(true)}\n              className=\"lg:hidden h-9 w-9 p-0 rounded-xl hover:bg-blue-50 dark:hover:bg-blue-900/20 text-blue-600 dark:text-blue-400 transition-all duration-200\"\n            >\n              <Search className=\"w-4 h-4\" />\n            </Button>\n            \n            {/* Controls */}\n            <div className=\"flex items-center space-x-1 sm:space-x-2 bg-white/60 dark:bg-slate-700/60 rounded-2xl p-1 sm:p-1.5 border border-gray-200/50 dark:border-slate-600/50 shadow-sm\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setIsAiAssistantOpen(!isAiAssistantOpen)}\n                className={`h-8 w-8 sm:h-9 sm:w-9 p-0 rounded-xl transition-all duration-200 ${\n                  isAiAssistantOpen \n                    ? 'bg-blue-500 hover:bg-blue-600 text-white shadow-lg shadow-blue-500/30' \n                    : 'hover:bg-blue-50 dark:hover:bg-blue-900/20 text-blue-600 dark:text-blue-400'\n                }`}\n                title=\"AI Assistant\"\n              >\n                <Bot className=\"w-3.5 h-3.5 sm:w-4 sm:h-4\" />\n              </Button>\n              \n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={toggleTheme}\n                className=\"h-8 w-8 sm:h-9 sm:w-9 p-0 rounded-xl hover:bg-amber-50 dark:hover:bg-amber-900/20 text-amber-600 dark:text-amber-400 transition-all duration-200\"\n                title=\"Toggle Theme\"\n              >\n                {theme === \"light\" ? <Moon className=\"w-3.5 h-3.5 sm:w-4 sm:h-4\" /> : <Sun className=\"w-3.5 h-3.5 sm:w-4 sm:h-4\" />}\n              </Button>\n              \n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setIsMiniMapOpen(!isMiniMapOpen)}\n                className={`h-8 w-8 sm:h-9 sm:w-9 p-0 rounded-xl transition-all duration-200 ${\n                  isMiniMapOpen \n                    ? 'bg-emerald-500 hover:bg-emerald-600 text-white shadow-lg shadow-emerald-500/30' \n                    : 'hover:bg-emerald-50 dark:hover:bg-emerald-900/20 text-emerald-600 dark:text-emerald-400'\n                }`}\n                title=\"Board Analytics\"\n              >\n                <Map className=\"w-3.5 h-3.5 sm:w-4 sm:h-4\" />\n              </Button>\n              \n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => logout()}\n                className=\"h-8 w-8 sm:h-9 sm:w-9 p-0 rounded-xl hover:bg-red-50 dark:hover:bg-red-900/20 text-red-600 dark:text-red-400 transition-all duration-200\"\n                title={`Sign out (${user?.firstName} ${user?.lastName})`}\n              >\n                <LogOut className=\"w-3.5 h-3.5 sm:w-4 sm:h-4\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Board */}\n      <main className=\"flex-1 p-3 sm:p-4 lg:p-6\">\n        <DragDropContext onDragEnd={handleDragEnd}>\n          {/* Mobile: Vertical scroll, Tablet+: Horizontal scroll/wrap */}\n          <div className=\"flex flex-col sm:flex-row sm:flex-wrap xl:flex-nowrap gap-4 sm:gap-6 min-h-full overflow-x-auto sm:overflow-x-visible xl:overflow-x-auto custom-scrollbar mobile-scroll\">\n            {columns.map((column: Column, index: number) => (\n              <KanbanColumn\n                key={column.id}\n                column={column}\n                tasks={filteredTasksByColumn[column.id] || []}\n                onAddTask={handleAddTask}\n                onEditTask={handleEditTask}\n                index={index}\n              />\n            ))}\n                  \n            \n            {/* Add Column Button */}\n            <div className=\"w-full sm:w-80 flex-shrink-0\">\n              <motion.button\n                whileHover={{ scale: 1.02 }}\n                whileTap={{ scale: 0.98 }}\n                onClick={handleAddColumn}\n                className=\"w-full h-40 border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-xl hover:border-gray-400 dark:hover:border-gray-500 hover:bg-gray-50 dark:hover:bg-slate-800/50 transition-all duration-200 flex flex-col items-center justify-center space-y-2 group\"\n              >\n                <Plus className=\"text-gray-400 group-hover:text-gray-600 dark:group-hover:text-gray-300 text-2xl\" />\n                <span className=\"text-gray-500 dark:text-gray-400 group-hover:text-gray-700 dark:group-hover:text-gray-300 text-sm font-medium\">\n                  Add Column\n                </span>\n              </motion.button>\n            </div>\n          </div>\n        </DragDropContext>\n        \n        {/* Mobile Statistics - Shows condensed stats for mobile */}\n        <div className=\"sm:hidden fixed bottom-4 left-4 right-4 bg-white/95 dark:bg-slate-800/95 backdrop-blur-xl rounded-2xl border border-gray-200/60 dark:border-slate-700/60 shadow-lg p-3 z-40\">\n          <button\n            onClick={() => setIsMobileStatsOpen(!isMobileStatsOpen)}\n            className=\"w-full flex items-center justify-between\"\n          >\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-6 h-6 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center\">\n                <Bot className=\"text-white w-3 h-3\" />\n              </div>\n              <div className=\"text-left\">\n                <h3 className=\"font-semibold text-gray-900 dark:text-white text-sm\">Board Stats</h3>\n                <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                  {stats.total} tasks • {Math.round((stats.done / stats.total) * 100) || 0}% complete\n                </p>\n              </div>\n            </div>\n            <div className=\"flex space-x-1\">\n              <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n              <div className=\"w-2 h-2 bg-amber-500 rounded-full\"></div>\n              <div className=\"w-2 h-2 bg-orange-500 rounded-full\"></div>\n              <div className=\"w-2 h-2 bg-emerald-500 rounded-full\"></div>\n            </div>\n          </button>\n          \n          {isMobileStatsOpen && (\n            <motion.div\n              initial={{ height: 0, opacity: 0 }}\n              animate={{ height: \"auto\", opacity: 1 }}\n              exit={{ height: 0, opacity: 0 }}\n              className=\"mt-3 pt-3 border-t border-gray-200/50 dark:border-slate-700/50 grid grid-cols-4 gap-2\"\n            >\n              <div className=\"text-center\">\n                <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900/50 rounded-lg flex items-center justify-center mx-auto mb-1\">\n                  <span className=\"text-blue-600 dark:text-blue-400 text-xs font-bold\">{stats.backlog}</span>\n                </div>\n                <p className=\"text-xs text-gray-600 dark:text-gray-400\">Backlog</p>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"w-8 h-8 bg-amber-100 dark:bg-amber-900/50 rounded-lg flex items-center justify-center mx-auto mb-1\">\n                  <span className=\"text-amber-600 dark:text-amber-400 text-xs font-bold\">{stats.inProgress}</span>\n                </div>\n                <p className=\"text-xs text-gray-600 dark:text-gray-400\">Active</p>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"w-8 h-8 bg-orange-100 dark:bg-orange-900/50 rounded-lg flex items-center justify-center mx-auto mb-1\">\n                  <span className=\"text-orange-600 dark:text-orange-400 text-xs font-bold\">{stats.review}</span>\n                </div>\n                <p className=\"text-xs text-gray-600 dark:text-gray-400\">Review</p>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"w-8 h-8 bg-emerald-100 dark:bg-emerald-900/50 rounded-lg flex items-center justify-center mx-auto mb-1\">\n                  <span className=\"text-emerald-600 dark:text-emerald-400 text-xs font-bold\">{stats.done}</span>\n                </div>\n                <p className=\"text-xs text-gray-600 dark:text-gray-400\">Done</p>\n              </div>\n            </motion.div>\n          )}\n        </div>\n        \n        {/* Mobile Search Modal */}\n        {isMobileSearchOpen && (\n          <div className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-start justify-center pt-16\">\n            <motion.div\n              initial={{ opacity: 0, y: -20, scale: 0.95 }}\n              animate={{ opacity: 1, y: 0, scale: 1 }}\n              exit={{ opacity: 0, y: -20, scale: 0.95 }}\n              className=\"bg-white dark:bg-slate-800 rounded-2xl shadow-xl m-4 w-full max-w-md overflow-hidden\"\n            >\n              <div className=\"p-4 border-b border-gray-200 dark:border-slate-700\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"font-semibold text-gray-900 dark:text-white\">Search Tasks</h3>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => setIsMobileSearchOpen(false)}\n                    className=\"h-8 w-8 p-0 rounded-lg\"\n                  >\n                    <X className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n                <div className=\"relative\">\n                  <Input\n                    type=\"text\"\n                    placeholder=\"Search tasks, tags...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"pl-11 pr-4 bg-gray-50 dark:bg-slate-700 border-gray-200 dark:border-slate-600 rounded-xl\"\n                    autoFocus\n                  />\n                  <Search className=\"absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                </div>\n              </div>\n              \n              {searchQuery && (\n                <div className=\"p-4 max-h-60 overflow-y-auto\">\n                  <p className=\"text-sm text-gray-500 dark:text-gray-400 mb-2\">\n                    Found {Object.values(filteredTasksByColumn).flat().length} results\n                  </p>\n                  <div className=\"space-y-2\">\n                    {Object.values(filteredTasksByColumn).flat().map((task) => (\n                      <div\n                        key={task.id}\n                        onClick={() => {\n                          setSelectedTask(task);\n                          setIsTaskModalOpen(true);\n                          setIsMobileSearchOpen(false);\n                        }}\n                        className=\"p-3 bg-gray-50 dark:bg-slate-700 rounded-lg cursor-pointer hover:bg-gray-100 dark:hover:bg-slate-600 transition-colors\"\n                      >\n                        <h4 className=\"font-medium text-gray-900 dark:text-white text-sm\">{task.title}</h4>\n                        {task.description && (\n                          <p className=\"text-xs text-gray-600 dark:text-gray-400 mt-1 line-clamp-1\">{task.description}</p>\n                        )}\n                        <div className=\"flex items-center space-x-2 mt-2\">\n                          <span className=\"text-xs bg-gray-200 dark:bg-slate-600 px-2 py-1 rounded\">\n                            {columns.find(c => c.id === task.columnId)?.title}\n                          </span>\n                          {task.tags?.slice(0, 1).map(tag => (\n                            <span key={tag} className=\"text-xs bg-purple-100 dark:bg-purple-900/50 text-purple-700 dark:text-purple-300 px-2 py-1 rounded\">\n                              {tag}\n                            </span>\n                          ))}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </motion.div>\n          </div>\n        )}\n      </main>\n\n      {/* Modals and Overlays */}\n      <TaskModal\n        task={selectedTask}\n        isOpen={isTaskModalOpen}\n        onClose={() => setIsTaskModalOpen(false)}\n        onSave={handleSaveTask}\n        onDelete={handleDeleteTask}\n      />\n\n      <CreateTaskModal\n        isOpen={isCreateTaskModalOpen}\n        onClose={() => setIsCreateTaskModalOpen(false)}\n        onCreateTask={handleCreateTask}\n        columnId={createTaskColumnId}\n      />\n\n      <CreateColumnModal\n        isOpen={isCreateColumnModalOpen}\n        onClose={() => setIsCreateColumnModalOpen(false)}\n        onCreateColumn={handleCreateColumn}\n      />\n\n      <AiAssistant\n        isOpen={isAiAssistantOpen}\n        onClose={() => setIsAiAssistantOpen(false)}\n        boardId={boardId}\n      />\n\n      <MiniMap\n        isOpen={isMiniMapOpen}\n        onClose={() => setIsMiniMapOpen(false)}\n        columns={columns as Column[]}\n        tasksByColumn={tasksByColumn}\n      />\n    </div>\n  );\n}\n","size_bytes":28295},"client/src/components/kanban/kanban-column.tsx":{"content":"import { motion, AnimatePresence } from \"framer-motion\";\nimport { Plus, MoreHorizontal } from \"lucide-react\";\nimport { Droppable, Draggable } from \"@hello-pangea/dnd\";\nimport { createPortal } from \"react-dom\";\nimport { TaskCard } from \"./task-card\";\nimport { Button } from \"@/components/ui/button\";\nimport type { Column, Task } from \"@shared/schema\";\n\ninterface KanbanColumnProps {\n  column: Column;\n  tasks: Task[];\n  onAddTask: (columnId: string) => void;\n  onEditTask: (task: Task) => void;\n  index: number;\n}\n\nconst columnColors = {\n  \"#3b82f6\": \"bg-blue-100 dark:bg-blue-900/50 text-blue-800 dark:text-blue-200\",\n  \"#eab308\": \"bg-yellow-100 dark:bg-yellow-900/50 text-yellow-800 dark:text-yellow-200\",\n  \"#f97316\": \"bg-orange-100 dark:bg-orange-900/50 text-orange-800 dark:text-orange-200\",\n  \"#10b981\": \"bg-emerald-100 dark:bg-emerald-900/50 text-emerald-800 dark:text-emerald-200\",\n};\n\nexport function KanbanColumn({ column, tasks, onAddTask, onEditTask, index }: KanbanColumnProps) {\n  // Подсчитываем средний прогресс задач в этой колонке\n  const averageProgress = tasks.length > 0 \n    ? tasks.reduce((sum, task) => sum + (task.progress || 0), 0) / tasks.length \n    : 0;\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ delay: index * 0.1, type: \"spring\", stiffness: 200, damping: 20 }}\n      className=\"w-full sm:w-80 flex-shrink-0 bg-gradient-to-b from-white/80 to-white/60 dark:from-slate-800/80 dark:to-slate-800/60 backdrop-blur-md rounded-2xl border border-gray-200/40 dark:border-slate-700/40 shadow-xl shadow-black/5 dark:shadow-black/20 hover:shadow-2xl transition-all duration-300\"\n    >\n      <div className=\"p-4 sm:p-5 border-b border-gray-200/30 dark:border-slate-700/30 bg-gradient-to-r from-transparent via-white/20 to-transparent dark:via-slate-700/20\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2 sm:space-x-3 flex-1 min-w-0\">\n                <div className=\"relative flex-shrink-0\">\n                  <div \n                    className=\"w-3.5 h-3.5 sm:w-4 sm:h-4 rounded-full shadow-lg\"\n                    style={{ backgroundColor: column.color, boxShadow: `0 0 20px ${column.color}40` }}\n                  />\n                  <div \n                    className=\"absolute inset-0 w-3.5 h-3.5 sm:w-4 sm:h-4 rounded-full animate-pulse\"\n                    style={{ backgroundColor: column.color, opacity: 0.3 }}\n                  />\n                </div>\n                <div className=\"min-w-0 flex-1\">\n                  <h3 className=\"font-bold text-gray-900 dark:text-white text-base sm:text-lg truncate\">{column.title}</h3>\n                  <p className=\"text-xs text-gray-500 dark:text-gray-400 font-medium truncate\">\n                    {tasks.length} task{tasks.length !== 1 ? 's' : ''} • {Math.round(averageProgress)}% complete\n                  </p>\n                </div>\n                <span className={`text-xs px-2 sm:px-3 py-1 sm:py-1.5 rounded-xl font-bold shadow-sm border flex-shrink-0 ${\n                  columnColors[column.color as keyof typeof columnColors] || \n                  \"bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200\"\n                } border-white/50 dark:border-slate-600/50`}>\n                  {tasks.length}\n                </span>\n              </div>\n              <div className=\"flex items-center space-x-1 flex-shrink-0\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => onAddTask(column.id)}\n                  className=\"h-8 w-8 sm:h-9 sm:w-9 p-0 rounded-xl hover:bg-white/80 dark:hover:bg-slate-700/80 transition-all duration-200 group touch-manipulation\"\n                  style={{ \n                    color: column.color,\n                    ['--tw-ring-color' as any]: `${column.color}40`\n                  }}\n                >\n                  <Plus className=\"h-3.5 w-3.5 sm:h-4 sm:w-4 group-hover:scale-110 transition-transform\" />\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => {\n                    // Показываем меню колонки (можно добавить dropdown menu)\n                    console.log(\"Column menu for:\", column.title);\n                  }}\n                  className=\"h-8 w-8 sm:h-9 sm:w-9 p-0 rounded-xl text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 hover:bg-white/80 dark:hover:bg-slate-700/80 transition-all duration-200 touch-manipulation\"\n                >\n                  <MoreHorizontal className=\"h-3.5 w-3.5 sm:h-4 sm:w-4\" />\n                </Button>\n              </div>\n            </div>\n            \n            {/* Enhanced Progress Bar */}\n            <div className=\"mt-3 sm:mt-4 bg-gray-200/60 dark:bg-slate-700/60 rounded-full h-1.5 sm:h-2 overflow-hidden backdrop-blur-sm\">\n              <motion.div \n                className=\"h-full rounded-full shadow-sm\"\n                style={{ \n                  background: `linear-gradient(90deg, ${column.color}CC, ${column.color})`\n                }}\n                initial={{ width: 0 }}\n                animate={{ width: `${averageProgress}%` }}\n                transition={{ duration: 1.5, ease: \"easeOut\" }}\n              />\n            </div>\n          </div>\n\n          <Droppable droppableId={column.id} type=\"task\">\n            {(provided, snapshot) => (\n              <div\n                ref={provided.innerRef}\n                {...provided.droppableProps}\n                className={`p-3 sm:p-5 min-h-64 sm:min-h-96 transition-all duration-300 rounded-b-2xl ${\n                  snapshot.isDraggingOver \n                    ? \"bg-gradient-to-b from-blue-50/60 to-blue-100/40 dark:from-blue-900/20 dark:to-blue-800/10 shadow-inner\" \n                    : \"hover:bg-gray-50/30 dark:hover:bg-slate-700/20\"\n                }`}\n                style={{\n                  // Убираем любые transform стили, которые могут мешать\n                  position: 'relative'\n                }}\n              >\n                {tasks.map((task, taskIndex) => (\n                  <Draggable key={task.id} draggableId={task.id} index={taskIndex}>\n                    {(provided, snapshot) => {\n                      const child = (\n                        <div\n                          ref={provided.innerRef}\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                          style={{\n                            ...provided.draggableProps.style,\n                            marginBottom: '8px',\n                          }}\n                        >\n                          <TaskCard\n                            task={task}\n                            onEdit={onEditTask}\n                            isDragging={snapshot.isDragging}\n                          />\n                        </div>\n                      );\n\n                      // Если элемент перетаскивается, рендерим его через Portal\n                      if (snapshot.isDragging) {\n                        return createPortal(child, document.body);\n                      }\n\n                      return child;\n                    }}\n                  </Draggable>\n                ))}\n                {provided.placeholder}\n                \n                {/* Drop Zone Indicator */}\n                {snapshot.isDraggingOver && (\n                  <motion.div\n                    initial={{ opacity: 0, scale: 0.9 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    exit={{ opacity: 0, scale: 0.9 }}\n                    transition={{ duration: 0.2 }}\n                    className=\"h-24 border-2 border-dashed border-blue-300 dark:border-blue-600 rounded-lg bg-blue-50/50 dark:bg-blue-900/20 flex items-center justify-center\"\n                  >\n                    <span className=\"text-sm text-blue-600 dark:text-blue-400 font-medium\">\n                      📋 Drop task here\n                    </span>\n                  </motion.div>\n                )}\n              </div>\n            )}\n          </Droppable>\n    </motion.div>\n  );\n}\n","size_bytes":8371},"client/src/components/kanban/mini-map.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { X, Map, TrendingUp, Clock, CheckCircle2, AlertCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport type { Column, Task } from \"@shared/schema\";\n\ninterface MiniMapProps {\n  isOpen: boolean;\n  onClose: () => void;\n  columns: Column[];\n  tasksByColumn: Record<string, Task[]>;\n}\n\nconst columnColorClasses = {\n  \"#3b82f6\": \"bg-blue-300 dark:bg-blue-600\",\n  \"#eab308\": \"bg-yellow-300 dark:bg-yellow-600\",\n  \"#f97316\": \"bg-orange-300 dark:bg-orange-600\",\n  \"#10b981\": \"bg-emerald-300 dark:bg-emerald-600\",\n};\n\nexport function MiniMap({ isOpen, onClose, columns, tasksByColumn }: MiniMapProps) {\n  if (!isOpen) return null;\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: -20, scale: 0.95 }}\n      animate={{ opacity: 1, y: 0, scale: 1 }}\n      exit={{ opacity: 0, y: -20, scale: 0.95 }}\n      transition={{ type: \"spring\", stiffness: 300, damping: 30 }}\n      className=\"fixed top-16 sm:top-20 right-2 sm:right-4 z-40 w-[calc(100vw-1rem)] max-w-sm sm:w-80\"\n    >\n      <Card className=\"bg-white/95 dark:bg-slate-800/95 backdrop-blur-xl shadow-2xl border-gray-200/30 dark:border-slate-700/30 ring-1 ring-black/5 dark:ring-white/5\">\n        <CardHeader className=\"pb-4 bg-gradient-to-r from-blue-500/10 via-purple-500/10 to-pink-500/10 dark:from-blue-400/20 dark:via-purple-400/20 dark:to-pink-400/20 rounded-t-lg\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-white/80 dark:bg-slate-700/80 rounded-lg shadow-sm\">\n                <TrendingUp className=\"w-4 h-4 text-blue-600 dark:text-blue-400\" />\n              </div>\n              <div>\n                <CardTitle className=\"text-base font-semibold\">Board Analytics</CardTitle>\n                <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-0.5\">Real-time overview</p>\n              </div>\n            </div>\n            <Button variant=\"ghost\" size=\"sm\" onClick={onClose} className=\"h-8 w-8 p-0 hover:bg-white/80 dark:hover:bg-slate-700/80 rounded-lg\">\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </CardHeader>\n\n        <CardContent className=\"space-y-4 sm:space-y-6 p-4 sm:p-6\">\n          {/* Quick Stats */}\n          <div className=\"grid grid-cols-2 gap-3 sm:gap-4\">\n            <div className=\"bg-gradient-to-r from-blue-50 to-blue-100 dark:from-blue-900/20 dark:to-blue-800/20 p-2.5 sm:p-3 rounded-lg border border-blue-200/50 dark:border-blue-700/50\">\n              <div className=\"flex items-center space-x-2\">\n                <AlertCircle className=\"w-4 h-4 text-blue-600 dark:text-blue-400\" />\n                <span className=\"text-sm font-medium text-blue-900 dark:text-blue-100\">Active</span>\n              </div>\n              <div className=\"text-base sm:text-lg font-bold text-blue-900 dark:text-blue-100 mt-1\">\n                {Object.values(tasksByColumn).flat().filter(t => t.status !== 'done').length}\n              </div>\n            </div>\n            <div className=\"bg-gradient-to-r from-emerald-50 to-emerald-100 dark:from-emerald-900/20 dark:to-emerald-800/20 p-2.5 sm:p-3 rounded-lg border border-emerald-200/50 dark:border-emerald-700/50\">\n              <div className=\"flex items-center space-x-2\">\n                <CheckCircle2 className=\"w-4 h-4 text-emerald-600 dark:text-emerald-400\" />\n                <span className=\"text-sm font-medium text-emerald-900 dark:text-emerald-100\">Done</span>\n              </div>\n              <div className=\"text-base sm:text-lg font-bold text-emerald-900 dark:text-emerald-100 mt-1\">\n                {(tasksByColumn['done'] || []).length}\n              </div>\n            </div>\n          </div>\n\n          {/* Column Overview */}\n          <div className=\"space-y-3 sm:space-y-4\">\n            {columns.map((column) => {\n              const tasks = tasksByColumn[column.id] || [];\n              const totalTasks = Object.values(tasksByColumn).flat().length;\n              const percentage = totalTasks > 0 ? (tasks.length / totalTasks) * 100 : 0;\n              \n              let icon = Clock;\n              if (column.id === 'done') icon = CheckCircle2;\n              else if (column.id === 'in-progress') icon = TrendingUp;\n              else if (column.id === 'review') icon = AlertCircle;\n              \n              const Icon = icon;\n              \n              return (\n                <motion.div\n                  key={column.id}\n                  initial={{ opacity: 0, y: 10 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ delay: columns.indexOf(column) * 0.1 }}\n                  className=\"bg-white/50 dark:bg-slate-700/30 rounded-lg p-3 sm:p-4 border border-gray-200/50 dark:border-slate-600/50 hover:border-gray-300/70 dark:hover:border-slate-500/70 transition-all duration-200\"\n                >\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"p-1.5 rounded-lg\" style={{ backgroundColor: `${column.color}20` }}>\n                        <Icon className=\"w-4 h-4\" style={{ color: column.color }} />\n                      </div>\n                      <div>\n                        <div className=\"font-medium text-sm\" style={{ color: column.color }}>\n                          {column.title}\n                        </div>\n                        <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n                          {tasks.length} task{tasks.length !== 1 ? 's' : ''}\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"text-sm font-semibold text-gray-900 dark:text-gray-100\">\n                        {Math.round(percentage)}%\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <Progress value={percentage} className=\"h-2\" style={{\n                    ['--progress-background' as any]: `${column.color}20`,\n                    ['--progress-foreground' as any]: column.color\n                  }} />\n                  \n                  {tasks.length > 0 && (\n                    <div className=\"mt-3 space-y-1\">\n                      {tasks.slice(0, 3).map((task, index) => (\n                        <motion.div\n                          key={task.id}\n                          initial={{ opacity: 0, x: -10 }}\n                          animate={{ opacity: 1, x: 0 }}\n                          transition={{ delay: (columns.indexOf(column) * 0.1) + (index * 0.05) }}\n                          className=\"flex items-center space-x-2 text-xs text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-200 transition-colors cursor-pointer\"\n                          title={task.description || task.title}\n                        >\n                          <div className=\"w-1.5 h-1.5 rounded-full\" style={{ backgroundColor: column.color }} />\n                          <span className=\"truncate flex-1\">{task.title}</span>\n                        </motion.div>\n                      ))}\n                      {tasks.length > 3 && (\n                        <div className=\"text-xs text-gray-400 dark:text-gray-500 ml-3.5\">\n                          +{tasks.length - 3} more tasks\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </motion.div>\n              );\n            })}\n          </div>\n\n          {/* Summary */}\n          <div className=\"pt-4 border-t border-gray-200/50 dark:border-slate-600/50\">\n            <div className=\"flex items-center justify-between text-sm\">\n              <span className=\"text-gray-600 dark:text-gray-400\">Total Progress</span>\n              <span className=\"font-semibold text-gray-900 dark:text-gray-100\">\n                {Object.values(tasksByColumn).flat().length} tasks\n              </span>\n            </div>\n            <Progress \n              value={(tasksByColumn['done']?.length || 0) / Math.max(Object.values(tasksByColumn).flat().length, 1) * 100} \n              className=\"h-2 mt-2\" \n            />\n          </div>\n        </CardContent>\n      </Card>\n    </motion.div>\n  );\n}","size_bytes":8503},"client/src/components/kanban/task-card.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { Calendar, Clock, User, MessageCircle, Link } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport type { Task } from \"@shared/schema\";\n\ninterface TaskCardProps {\n  task: Task;\n  onEdit: (task: Task) => void;\n  isDragging?: boolean;\n}\n\nconst priorityStyles = {\n  high: \"from-red-50 to-pink-50 dark:from-red-900/20 dark:to-pink-900/20 border-l-red-500\",\n  medium: \"from-yellow-50 to-orange-50 dark:from-yellow-900/20 dark:to-orange-900/20 border-l-yellow-500\",\n  low: \"from-gray-50 to-slate-50 dark:from-gray-800/50 dark:to-slate-800/50 border-l-gray-400\",\n};\n\nconst priorityBadgeStyles = {\n  high: \"bg-red-100 dark:bg-red-900/50 text-red-800 dark:text-red-200\",\n  medium: \"bg-yellow-100 dark:bg-yellow-900/50 text-yellow-800 dark:text-yellow-200\",\n  low: \"bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200\",\n};\n\nexport function TaskCard({ task, onEdit, isDragging }: TaskCardProps) {\n  const formatDueDate = (date: Date | null) => {\n    if (!date) return \"No due date\";\n    \n    const dateObj = new Date(date);\n    const now = new Date();\n    const diffTime = dateObj.getTime() - now.getTime();\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    \n    if (diffDays === 0) return \"Due today\";\n    if (diffDays === 1) return \"Due tomorrow\";\n    if (diffDays === -1) return \"Due yesterday\";\n    if (diffDays > 0) return `Due in ${diffDays} days`;\n    return `Overdue by ${Math.abs(diffDays)} days`;\n  };\n\n  const getDueDateColor = (date: Date | null) => {\n    if (!date) return \"text-gray-500 dark:text-gray-400\";\n    \n    const dateObj = new Date(date);\n    const now = new Date();\n    const diffTime = dateObj.getTime() - now.getTime();\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    \n    if (diffDays <= 0) return \"text-red-600 dark:text-red-400\";\n    if (diffDays <= 2) return \"text-orange-600 dark:text-orange-400\";\n    return \"text-gray-500 dark:text-gray-400\";\n  };\n\n  // Use regular div during dragging to avoid conflicts\n  if (isDragging) {\n    return (\n      <div\n        className={cn(\n          \"bg-gradient-to-r border-l-4 rounded-lg p-4 cursor-grabbing shadow-xl opacity-95\",\n          priorityStyles[task.priority as keyof typeof priorityStyles]\n        )}\n        onClick={() => onEdit(task)}\n      >\n      <div className=\"flex items-start justify-between mb-2\">\n        <div className=\"flex items-center space-x-2 flex-wrap\">\n          <span className={cn(\n            \"text-xs px-2 py-1 rounded-full font-medium\",\n            priorityBadgeStyles[task.priority as keyof typeof priorityBadgeStyles]\n          )}>\n            {task.priority === \"high\" ? \"High Priority\" : \n             task.priority === \"medium\" ? \"Medium\" : \"Low Priority\"}\n          </span>\n          {task.tags && task.tags.length > 0 && (\n            <span className=\"bg-purple-100 dark:bg-purple-900/50 text-purple-800 dark:text-purple-200 text-xs px-2 py-1 rounded-full font-medium\">\n              {task.tags[0]}\n            </span>\n          )}\n        </div>\n      </div>\n\n      <h4 className=\"font-semibold text-gray-900 dark:text-white text-sm mb-2 line-clamp-2\">\n        {task.title}\n      </h4>\n\n      {task.description && (\n        <p className=\"text-gray-600 dark:text-gray-400 text-xs mb-3 line-clamp-2\">\n          {task.description}\n        </p>\n      )}\n\n      {task.progress > 0 && (\n        <div className=\"mb-3\">\n          <div className=\"bg-gray-200 dark:bg-slate-700 rounded-full h-1.5 overflow-hidden\">\n            <div \n              className=\"bg-gradient-to-r from-blue-500 to-indigo-500 h-full rounded-full\"\n              style={{ width: `${task.progress}%` }}\n            />\n          </div>\n          <div className=\"flex justify-between text-xs mt-1\">\n            <span className=\"text-gray-500 dark:text-gray-400\">Progress</span>\n            <span className=\"text-blue-600 dark:text-blue-400 font-medium\">{task.progress}%</span>\n          </div>\n        </div>\n      )}\n\n      <div className=\"flex items-center justify-between text-xs\">\n        <div className=\"flex items-center space-x-2\">\n          <Calendar className=\"w-3 h-3 text-gray-400\" />\n          <span className={getDueDateColor(task.dueDate)}>\n            {formatDueDate(task.dueDate)}\n          </span>\n        </div>\n        <div className=\"flex items-center space-x-1\">\n          <div className=\"w-6 h-6 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center text-white text-xs font-medium\">\n            {task.title.charAt(0).toUpperCase()}\n          </div>\n        </div>\n      </div>\n      </div>\n    );\n  }\n\n  // Use motion.div when not dragging\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      exit={{ opacity: 0, y: -20 }}\n      whileHover={{ \n        y: -4, \n        scale: 1.02,\n        boxShadow: \"0 20px 40px rgba(0, 0, 0, 0.1), 0 0 20px rgba(59, 130, 246, 0.2)\"\n      }}\n      whileTap={{ scale: 0.98 }}\n      transition={{ \n        type: \"spring\", \n        stiffness: 260, \n        damping: 20\n      }}\n      className={cn(\n        \"bg-gradient-to-r border-l-4 rounded-lg p-4 cursor-pointer shadow-sm hover:shadow-lg transition-shadow duration-200\",\n        priorityStyles[task.priority as keyof typeof priorityStyles]\n      )}\n      onClick={() => onEdit(task)}\n    >\n      <div className=\"flex items-start justify-between mb-2\">\n        <div className=\"flex items-center space-x-2 flex-wrap\">\n          <span className={cn(\n            \"text-xs px-2 py-1 rounded-full font-medium\",\n            priorityBadgeStyles[task.priority as keyof typeof priorityBadgeStyles]\n          )}>\n            {task.priority === \"high\" ? \"High Priority\" : \n             task.priority === \"medium\" ? \"Medium\" : \"Low Priority\"}\n          </span>\n          {task.tags && task.tags.length > 0 && (\n            <span className=\"bg-purple-100 dark:bg-purple-900/50 text-purple-800 dark:text-purple-200 text-xs px-2 py-1 rounded-full font-medium\">\n              {task.tags[0]}\n            </span>\n          )}\n        </div>\n      </div>\n\n      <h4 className=\"font-semibold text-gray-900 dark:text-white text-sm mb-2 line-clamp-2\">\n        {task.title}\n      </h4>\n\n      {task.description && (\n        <p className=\"text-gray-600 dark:text-gray-400 text-xs mb-3 line-clamp-2\">\n          {task.description}\n        </p>\n      )}\n\n      {task.progress > 0 && (\n        <div className=\"mb-3\">\n          <div className=\"bg-gray-200 dark:bg-slate-700 rounded-full h-1.5 overflow-hidden\">\n            <motion.div \n              className=\"bg-gradient-to-r from-blue-500 to-indigo-500 h-full rounded-full\"\n              initial={{ width: 0 }}\n              animate={{ width: `${task.progress}%` }}\n              transition={{ duration: 1, ease: \"easeOut\" }}\n            />\n          </div>\n          <div className=\"flex justify-between text-xs mt-1\">\n            <span className=\"text-gray-500 dark:text-gray-400\">Progress</span>\n            <span className=\"text-blue-600 dark:text-blue-400 font-medium\">{task.progress}%</span>\n          </div>\n        </div>\n      )}\n\n      <div className=\"flex items-center justify-between text-xs\">\n        <div className=\"flex items-center space-x-2\">\n          <Calendar className=\"w-3 h-3 text-gray-400\" />\n          <span className={getDueDateColor(task.dueDate)}>\n            {formatDueDate(task.dueDate)}\n          </span>\n        </div>\n        <div className=\"flex items-center space-x-1\">\n          <div className=\"w-6 h-6 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center text-white text-xs font-medium\">\n            {task.title.charAt(0).toUpperCase()}\n          </div>\n        </div>\n      </div>\n    </motion.div>\n  );\n}\n","size_bytes":7776},"client/src/components/kanban/task-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { X, Save, Trash2, Calendar, Tag, Link as LinkIcon, MessageCircle, Plus } from \"lucide-react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Task, Comment } from \"@shared/schema\";\n\ninterface TaskModalProps {\n  task: Task | null;\n  isOpen: boolean;\n  onClose: () => void;\n  onSave: (task: Task) => void;\n  onDelete: (taskId: string) => void;\n}\n\nexport function TaskModal({ task, isOpen, onClose, onSave, onDelete }: TaskModalProps) {\n  const [editedTask, setEditedTask] = useState<Task | null>(null);\n  const [newComment, setNewComment] = useState(\"\");\n  const [newTag, setNewTag] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  useEffect(() => {\n    if (task) {\n      setEditedTask({ ...task });\n    }\n  }, [task]);\n\n  const { data: comments = [] } = useQuery({\n    queryKey: [\"/api/tasks\", task?.id, \"comments\"],\n    enabled: !!task?.id,\n  });\n\n  const updateTaskMutation = useMutation({\n    mutationFn: async (updates: Partial<Task>) => {\n      if (!task) throw new Error(\"No task selected\");\n      const response = await apiRequest(\"PUT\", `/api/tasks/${task.id}`, updates);\n      return response.json();\n    },\n    onSuccess: (updatedTask) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/columns\"] });\n      onSave(updatedTask);\n      // Убираем уведомление при обновлении задач\n    },\n    onError: () => {\n      toast({ title: \"Failed to update task\", variant: \"destructive\" });\n    },\n  });\n\n  const deleteTaskMutation = useMutation({\n    mutationFn: async () => {\n      if (!task) throw new Error(\"No task selected\");\n      await apiRequest(\"DELETE\", `/api/tasks/${task.id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/columns\"] });\n      onDelete(task!.id);\n      onClose();\n      toast({ title: \"Task deleted successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to delete task\", variant: \"destructive\" });\n    },\n  });\n\n  const addCommentMutation = useMutation({\n    mutationFn: async (content: string) => {\n      if (!task) throw new Error(\"No task selected\");\n      const response = await apiRequest(\"POST\", \"/api/comments\", {\n        taskId: task.id,\n        content,\n        author: \"You\",\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\", task?.id, \"comments\"] });\n      setNewComment(\"\");\n      toast({ title: \"Comment added\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to add comment\", variant: \"destructive\" });\n    },\n  });\n\n  const handleSave = () => {\n    if (!editedTask) return;\n    updateTaskMutation.mutate(editedTask);\n  };\n\n  const handleDelete = () => {\n    if (window.confirm(\"Are you sure you want to delete this task?\")) {\n      deleteTaskMutation.mutate();\n    }\n  };\n\n  const handleAddComment = () => {\n    if (newComment.trim()) {\n      addCommentMutation.mutate(newComment.trim());\n    }\n  };\n\n  const handleAddTag = () => {\n    if (newTag.trim() && editedTask) {\n      const currentTags = editedTask.tags || [];\n      if (!currentTags.includes(newTag.trim())) {\n        setEditedTask({\n          ...editedTask,\n          tags: [...currentTags, newTag.trim()],\n        });\n        setNewTag(\"\");\n      }\n    }\n  };\n\n  const handleRemoveTag = (tagToRemove: string) => {\n    if (editedTask) {\n      setEditedTask({\n        ...editedTask,\n        tags: (editedTask.tags || []).filter(tag => tag !== tagToRemove),\n      });\n    }\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent, action: () => void) => {\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n      action();\n    }\n  };\n\n  if (!editedTask) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader className=\"space-y-4\">\n          <DialogTitle className=\"sr-only\">Edit Task</DialogTitle>\n          <DialogDescription className=\"sr-only\">\n            Edit task details, priority, status, and other properties\n          </DialogDescription>\n          <div className=\"w-full\">\n            <Input\n              value={editedTask.title}\n              onChange={(e) => setEditedTask({ ...editedTask, title: e.target.value })}\n              className=\"text-xl font-semibold border-none p-0 focus-visible:ring-0 bg-transparent\"\n              placeholder=\"Task title...\"\n              data-testid=\"input-edit-task-title\"\n            />\n          </div>\n          \n          <div className=\"flex items-center space-x-2 flex-wrap\">\n            <Select\n              value={editedTask.priority}\n              onValueChange={(value) => setEditedTask({ ...editedTask, priority: value })}\n            >\n              <SelectTrigger className=\"w-auto\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"high\">High Priority</SelectItem>\n                <SelectItem value=\"medium\">Medium Priority</SelectItem>\n                <SelectItem value=\"low\">Low Priority</SelectItem>\n              </SelectContent>\n            </Select>\n            \n            <Select\n              value={editedTask.status}\n              onValueChange={(value) => setEditedTask({ ...editedTask, status: value })}\n            >\n              <SelectTrigger className=\"w-auto\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"backlog\">Backlog</SelectItem>\n                <SelectItem value=\"in-progress\">In Progress</SelectItem>\n                <SelectItem value=\"review\">Review</SelectItem>\n                <SelectItem value=\"done\">Done</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Description */}\n          <div>\n            <label className=\"block text-sm font-medium mb-2\">Description</label>\n            <Textarea\n              value={editedTask.description || \"\"}\n              onChange={(e) => setEditedTask({ ...editedTask, description: e.target.value })}\n              placeholder=\"Add task description...\"\n              rows={4}\n            />\n          </div>\n\n          {/* Due Date and Progress */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">Due Date</label>\n              <Input\n                type=\"date\"\n                value={editedTask.dueDate ? new Date(editedTask.dueDate).toISOString().split('T')[0] : \"\"}\n                onChange={(e) => setEditedTask({ \n                  ...editedTask, \n                  dueDate: e.target.value ? new Date(e.target.value) : null \n                })}\n              />\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium mb-2\">Progress: {editedTask.progress}%</label>\n              <Slider\n                value={[editedTask.progress]}\n                onValueChange={([value]) => setEditedTask({ ...editedTask, progress: value })}\n                max={100}\n                step={5}\n                className=\"mt-2\"\n              />\n            </div>\n          </div>\n\n          {/* Tags */}\n          <div>\n            <label className=\"block text-sm font-medium mb-2\">Tags</label>\n            <div className=\"flex flex-wrap gap-2 mb-2\">\n              <AnimatePresence>\n                {editedTask.tags?.map((tag) => (\n                  <motion.div\n                    key={tag}\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    exit={{ opacity: 0, scale: 0.8 }}\n                  >\n                    <Badge variant=\"secondary\" className=\"cursor-pointer\" onClick={() => handleRemoveTag(tag)}>\n                      {tag} <X className=\"h-3 w-3 ml-1\" />\n                    </Badge>\n                  </motion.div>\n                ))}\n              </AnimatePresence>\n            </div>\n            <div className=\"flex space-x-2\">\n              <Input\n                value={newTag}\n                onChange={(e) => setNewTag(e.target.value)}\n                placeholder=\"Add tag...\"\n                onKeyDown={(e) => handleKeyDown(e, handleAddTag)}\n                className=\"flex-1\"\n              />\n              <Button onClick={handleAddTag} size=\"sm\">\n                <Plus className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n\n          {/* Comments */}\n          <div>\n            <label className=\"block text-sm font-medium mb-2\">Comments</label>\n            <div className=\"space-y-3 mb-4 max-h-40 overflow-y-auto\">\n              <AnimatePresence>\n                {(comments as Comment[]).map((comment: Comment) => (\n                  <motion.div\n                    key={comment.id}\n                    initial={{ opacity: 0, y: 10 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    className=\"bg-gray-50 dark:bg-slate-700 rounded-lg p-3\"\n                  >\n                    <div className=\"flex items-center space-x-2 mb-2\">\n                      <div className=\"w-6 h-6 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center text-white text-xs font-medium\">\n                        {comment.author.charAt(0).toUpperCase()}\n                      </div>\n                      <span className=\"text-sm font-medium\">{comment.author}</span>\n                      <span className=\"text-xs text-gray-500\">\n                        {new Date(comment.createdAt!).toLocaleDateString()}\n                      </span>\n                    </div>\n                    <p className=\"text-sm text-gray-700 dark:text-gray-300\">{comment.content}</p>\n                  </motion.div>\n                ))}\n              </AnimatePresence>\n            </div>\n            \n            <div className=\"flex space-x-3\">\n              <div className=\"w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center text-white text-sm font-medium\">\n                Y\n              </div>\n              <div className=\"flex-1 flex space-x-2\">\n                <Textarea\n                  value={newComment}\n                  onChange={(e) => setNewComment(e.target.value)}\n                  placeholder=\"Add a comment...\"\n                  rows={2}\n                  onKeyDown={(e) => {\n                    if (e.key === \"Enter\" && e.ctrlKey) {\n                      handleAddComment();\n                    }\n                  }}\n                  className=\"flex-1\"\n                />\n                <Button \n                  onClick={handleAddComment} \n                  disabled={!newComment.trim() || addCommentMutation.isPending}\n                  size=\"sm\"\n                >\n                  <MessageCircle className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Footer */}\n        <div className=\"flex justify-between pt-6 border-t\">\n          <Button\n            variant=\"destructive\"\n            onClick={handleDelete}\n            disabled={deleteTaskMutation.isPending}\n          >\n            <Trash2 className=\"h-4 w-4 mr-2\" />\n            Delete Task\n          </Button>\n          \n          <div className=\"flex space-x-3\">\n            <Button variant=\"outline\" onClick={onClose}>\n              Cancel\n            </Button>\n            <Button \n              onClick={handleSave}\n              disabled={updateTaskMutation.isPending}\n            >\n              <Save className=\"h-4 w-4 mr-2\" />\n              Save Changes\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":12534},"client/src/components/kanban/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ntype ThemeProviderContextType = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  toggleTheme: () => void;\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    if (typeof window !== \"undefined\") {\n      return (localStorage.getItem(\"theme\") as Theme) || \"light\";\n    }\n    return \"light\";\n  });\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(theme === \"light\" ? \"dark\" : \"light\");\n  };\n\n  const value = {\n    theme,\n    setTheme,\n    toggleTheme,\n  };\n\n  return (\n    <ThemeProviderContext.Provider value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n};\n","size_bytes":1274},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"DEPLOYMENT.md":{"content":"# TaskFlow Pro - Инструкция по развертыванию на Ubuntu сервере\n\n## Требования\n\n- Ubuntu Server 20.04+ \n- Node.js 18+ \n- PostgreSQL 14+\n- Nginx (для проксирования)\n- Домен с SSL сертификатом\n\n## Подготовка сервера\n\n### 1. Обновление системы\n```bash\nsudo apt update && sudo apt upgrade -y\n```\n\n### 2. Установка Node.js 18+\n```bash\ncurl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -\nsudo apt install -y nodejs\n```\n\n### 3. Установка PostgreSQL\n```bash\nsudo apt install postgresql postgresql-contrib -y\nsudo systemctl start postgresql\nsudo systemctl enable postgresql\n```\n\n### 4. Создание базы данных\n```bash\nsudo -u postgres psql\n\nCREATE DATABASE taskflow_pro;\nCREATE USER taskflow_user WITH ENCRYPTED PASSWORD 'your_secure_password';\nGRANT ALL PRIVILEGES ON DATABASE taskflow_pro TO taskflow_user;\nALTER DATABASE taskflow_pro OWNER TO taskflow_user;\n\\q\n```\n\n### 5. Установка Nginx\n```bash\nsudo apt install nginx -y\nsudo systemctl start nginx\nsudo systemctl enable nginx\n```\n\n## Развертывание приложения\n\n### 1. Клонирование и подготовка проекта\n```bash\n# Создаем пользователя для приложения\nsudo adduser taskflow\nsudo usermod -aG sudo taskflow\n\n# Переключаемся на пользователя taskflow\nsu taskflow\ncd /home/taskflow\n\n# Загружаем проект (замените на ваш репозиторий)\ngit clone YOUR_REPOSITORY_URL taskflow-pro\ncd taskflow-pro\n\n# Устанавливаем зависимости\nnpm install\n\n# Собираем проект\nnpm run build\n```\n\n### 2. Настройка конфигурации\n\nСоздайте файл `config.json` с настройками для продакшена:\n\n```json\n{\n  \"server\": {\n    \"port\": 3000,\n    \"cors\": {\n      \"origin\": [\"https://yourdomain.com\"],\n      \"credentials\": true\n    }\n  },\n  \"database\": {\n    \"type\": \"postgresql\",\n    \"ssl\": true,\n    \"maxConnections\": 20,\n    \"idleTimeout\": 30000\n  },\n  \"session\": {\n    \"secret\": \"your-super-secure-session-secret-change-this\",\n    \"name\": \"taskflow.sid\",\n    \"maxAge\": 86400000,\n    \"secure\": true,\n    \"httpOnly\": true,\n    \"sameSite\": \"strict\"\n  },\n  \"auth\": {\n    \"bcryptRounds\": 12,\n    \"tokenExpiration\": \"24h\"\n  },\n  \"app\": {\n    \"name\": \"TaskFlow Pro\",\n    \"description\": \"Smart Project Management\",\n    \"version\": \"1.0.0\"\n  },\n  \"features\": {\n    \"aiAssistant\": true,\n    \"notifications\": false,\n    \"analytics\": true\n  }\n}\n```\n\n### 3. Настройка переменных окружения\n```bash\n# Создаем файл .env\ncat > .env << EOF\nNODE_ENV=production\nDATABASE_URL=postgresql://taskflow_user:your_secure_password@localhost:5432/taskflow_pro\nSESSION_SECRET=your-super-secure-session-secret-change-this\nOPENAI_API_KEY=your-openai-api-key-if-needed\nPORT=3000\nEOF\n\nchmod 600 .env\n```\n\n### 4. Миграция базы данных\n```bash\n# Запуск миграций Drizzle\nnpm run db:push\n```\n\n### 5. Настройка systemd сервиса\n\nСоздайте файл сервиса:\n```bash\nsudo tee /etc/systemd/system/taskflow-pro.service << EOF\n[Unit]\nDescription=TaskFlow Pro - Smart Project Management\nAfter=network.target\n\n[Service]\nType=simple\nUser=taskflow\nWorkingDirectory=/home/taskflow/taskflow-pro\nEnvironment=NODE_ENV=production\nExecStart=/usr/bin/npm start\nRestart=always\nRestartSec=10\nStandardOutput=syslog\nStandardError=syslog\nSyslogIdentifier=taskflow-pro\n\n[Install]\nWantedBy=multi-user.target\nEOF\n```\n\nЗапуск сервиса:\n```bash\nsudo systemctl daemon-reload\nsudo systemctl enable taskflow-pro\nsudo systemctl start taskflow-pro\nsudo systemctl status taskflow-pro\n```\n\n### 6. Настройка Nginx\n\nСоздайте конфигурацию Nginx:\n```bash\nsudo tee /etc/nginx/sites-available/taskflow-pro << EOF\nserver {\n    listen 80;\n    server_name yourdomain.com www.yourdomain.com;\n    return 301 https://\\$server_name\\$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name yourdomain.com www.yourdomain.com;\n\n    ssl_certificate /etc/letsencrypt/live/yourdomain.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/yourdomain.com/privkey.pem;\n    \n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n    \n    add_header Strict-Transport-Security \"max-age=63072000\" always;\n    add_header X-Frame-Options DENY;\n    add_header X-Content-Type-Options nosniff;\n\n    client_max_body_size 10M;\n\n    location / {\n        proxy_pass http://localhost:3000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade \\$http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host \\$host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n        proxy_cache_bypass \\$http_upgrade;\n        proxy_read_timeout 86400;\n    }\n}\nEOF\n```\n\nАктивируйте конфигурацию:\n```bash\nsudo ln -s /etc/nginx/sites-available/taskflow-pro /etc/nginx/sites-enabled/\nsudo nginx -t\nsudo systemctl reload nginx\n```\n\n### 7. Настройка SSL с Let's Encrypt\n\n```bash\n# Установка Certbot\nsudo apt install certbot python3-certbot-nginx -y\n\n# Получение SSL сертификата\nsudo certbot --nginx -d yourdomain.com -d www.yourdomain.com\n\n# Настройка автообновления сертификата\nsudo crontab -e\n# Добавьте строку:\n# 0 12 * * * /usr/bin/certbot renew --quiet\n```\n\n## Настройка мониторинга и логов\n\n### 1. Логирование\n```bash\n# Просмотр логов приложения\nsudo journalctl -u taskflow-pro -f\n\n# Просмотр логов Nginx\nsudo tail -f /var/log/nginx/access.log\nsudo tail -f /var/log/nginx/error.log\n```\n\n### 2. Мониторинг процесса\n```bash\n# Установка htop для мониторинга\nsudo apt install htop -y\n\n# Проверка статуса всех сервисов\nsudo systemctl status taskflow-pro nginx postgresql\n```\n\n### 3. Настройка логротации\n```bash\nsudo tee /etc/logrotate.d/taskflow-pro << EOF\n/var/log/syslog {\n    daily\n    missingok\n    rotate 52\n    compress\n    delaycompress\n    notifempty\n    create 0644 syslog adm\n    postrotate\n        systemctl reload taskflow-pro\n    endscript\n}\nEOF\n```\n\n## Безопасность\n\n### 1. Firewall\n```bash\nsudo ufw enable\nsudo ufw allow ssh\nsudo ufw allow 'Nginx Full'\nsudo ufw status\n```\n\n### 2. PostgreSQL безопасность\n```bash\n# Редактируем pg_hba.conf для ограничения доступа\nsudo nano /etc/postgresql/14/main/pg_hba.conf\n\n# Убеждаемся, что есть строка:\n# local   all             taskflow_user                           md5\n# local   all             all                                     peer\n\nsudo systemctl restart postgresql\n```\n\n### 3. Обновления и резервные копии\n\n```bash\n# Создаем скрипт для резервного копирования БД\nsudo tee /home/taskflow/backup.sh << EOF\n#!/bin/bash\nDATE=$(date +\"%Y%m%d_%H%M%S\")\nBACKUP_DIR=\"/home/taskflow/backups\"\nmkdir -p \\$BACKUP_DIR\n\n# Бэкап базы данных\npg_dump -h localhost -U taskflow_user taskflow_pro > \\$BACKUP_DIR/taskflow_\\$DATE.sql\n\n# Удаляем старые бэкапы (старше 7 дней)\nfind \\$BACKUP_DIR -name \"taskflow_*.sql\" -mtime +7 -delete\n\necho \"Backup created: taskflow_\\$DATE.sql\"\nEOF\n\nchmod +x /home/taskflow/backup.sh\n\n# Добавляем в crontab ежедневный бэкап\ncrontab -e\n# Добавьте строку:\n# 0 2 * * * /home/taskflow/backup.sh\n```\n\n## Обновление приложения\n\n```bash\ncd /home/taskflow/taskflow-pro\n\n# Резервное копирование перед обновлением\n/home/taskflow/backup.sh\n\n# Получение обновлений\ngit pull origin main\n\n# Установка новых зависимостей\nnpm install\n\n# Перезапуск миграций если нужно\nnpm run db:push\n\n# Сборка проекта\nnpm run build\n\n# Перезапуск сервиса\nsudo systemctl restart taskflow-pro\n\n# Проверка статуса\nsudo systemctl status taskflow-pro\n```\n\n## Устранение неисправностей\n\n### Частые проблемы:\n\n1. **Приложение не запускается:**\n   ```bash\n   sudo journalctl -u taskflow-pro -n 50\n   ```\n\n2. **Проблемы с базой данных:**\n   ```bash\n   sudo -u postgres psql -c \"SELECT version();\"\n   ```\n\n3. **Проблемы с SSL:**\n   ```bash\n   sudo certbot certificates\n   sudo nginx -t\n   ```\n\n4. **Высокая нагрузка:**\n   ```bash\n   htop\n   df -h\n   ```\n\n## Поддержка и мониторинг\n\n- Логи приложения: `sudo journalctl -u taskflow-pro`\n- Логи Nginx: `/var/log/nginx/`\n- Статус сервисов: `sudo systemctl status taskflow-pro nginx postgresql`\n- Мониторинг диска: `df -h`\n- Мониторинг памяти: `free -h`\n\nПосле успешного развертывания ваше приложение TaskFlow Pro будет доступно по адресу `https://yourdomain.com`","size_bytes":9564},"server/auth.ts":{"content":"import bcrypt from 'bcryptjs';\nimport { eq } from 'drizzle-orm';\nimport { db } from './db';\nimport { users, sessions, type AuthUser, type AuthSession } from '../shared/auth-schema';\nimport config from './config';\nimport { nanoid } from 'nanoid';\n\nexport class AuthService {\n  // Регистрация пользователя\n  static async register(email: string, password: string, firstName: string, lastName: string): Promise<AuthUser> {\n    // Проверяем, существует ли пользователь\n    const existingUser = await db.select().from(users).where(eq(users.email, email)).limit(1);\n    if (existingUser.length > 0) {\n      throw new Error('User already exists');\n    }\n\n    // Хешируем пароль\n    const passwordHash = await bcrypt.hash(password, config.auth.bcryptRounds);\n\n    // Создаем пользователя\n    const [user] = await db.insert(users).values({\n      id: nanoid(),\n      email,\n      passwordHash,\n      firstName,\n      lastName,\n    }).returning();\n\n    return user;\n  }\n\n  // Авторизация пользователя\n  static async login(email: string, password: string): Promise<{ user: AuthUser; sessionId: string }> {\n    // Находим пользователя\n    const [user] = await db.select().from(users).where(eq(users.email, email)).limit(1);\n    if (!user) {\n      throw new Error('Invalid credentials');\n    }\n\n    // Проверяем пароль\n    const isValidPassword = await bcrypt.compare(password, user.passwordHash);\n    if (!isValidPassword) {\n      throw new Error('Invalid credentials');\n    }\n\n    // Создаем сессию\n    const sessionId = nanoid();\n    const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 часа\n\n    await db.insert(sessions).values({\n      id: sessionId,\n      userId: user.id,\n      expiresAt,\n    });\n\n    return { user, sessionId };\n  }\n\n  // Получение пользователя по сессии\n  static async getUserBySession(sessionId: string): Promise<AuthUser | null> {\n    if (!sessionId) return null;\n\n    const [session] = await db.select().from(sessions).where(eq(sessions.id, sessionId)).limit(1);\n    if (!session || session.expiresAt < new Date()) {\n      // Удаляем истекшую сессию\n      if (session) {\n        await db.delete(sessions).where(eq(sessions.id, sessionId));\n      }\n      return null;\n    }\n\n    const [user] = await db.select().from(users).where(eq(users.id, session.userId)).limit(1);\n    return user || null;\n  }\n\n  // Выход из системы\n  static async logout(sessionId: string): Promise<void> {\n    if (sessionId) {\n      await db.delete(sessions).where(eq(sessions.id, sessionId));\n    }\n  }\n\n  // Обновление профиля пользователя\n  static async updateProfile(userId: string, updates: Partial<Pick<AuthUser, 'firstName' | 'lastName' | 'profileImageUrl'>>): Promise<AuthUser> {\n    const [user] = await db.update(users)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(users.id, userId))\n      .returning();\n\n    if (!user) {\n      throw new Error('User not found');\n    }\n\n    return user;\n  }\n\n  // Очистка истекших сессий\n  static async cleanupExpiredSessions(): Promise<void> {\n    await db.delete(sessions).where(eq(sessions.expiresAt, new Date()));\n  }\n}","size_bytes":3366},"server/config.ts":{"content":"import fs from 'fs';\nimport path from 'path';\n\ninterface Config {\n  server: {\n    port: number;\n    cors: {\n      origin: string[];\n      credentials: boolean;\n    };\n  };\n  database: {\n    type: string;\n    ssl: boolean;\n    maxConnections: number;\n    idleTimeout: number;\n  };\n  session: {\n    secret: string;\n    name: string;\n    maxAge: number;\n    secure: boolean;\n    httpOnly: boolean;\n    sameSite: string;\n  };\n  auth: {\n    bcryptRounds: number;\n    tokenExpiration: string;\n  };\n  app: {\n    name: string;\n    description: string;\n    version: string;\n  };\n  features: {\n    aiAssistant: boolean;\n    notifications: boolean;\n    analytics: boolean;\n  };\n}\n\nlet config: Config;\n\ntry {\n  const configPath = path.join(process.cwd(), 'config.json');\n  const configFile = fs.readFileSync(configPath, 'utf8');\n  config = JSON.parse(configFile);\n} catch (error) {\n  console.error('Error loading config.json:', error);\n  // Fallback to default config\n  config = {\n    server: {\n      port: 5000,\n      cors: {\n        origin: [\"http://localhost:3000\", \"http://localhost:5000\"],\n        credentials: true\n      }\n    },\n    database: {\n      type: \"postgresql\",\n      ssl: true,\n      maxConnections: 20,\n      idleTimeout: 30000\n    },\n    session: {\n      secret: process.env.SESSION_SECRET || \"fallback-secret\",\n      name: \"taskflow.sid\",\n      maxAge: 86400000,\n      secure: false,\n      httpOnly: true,\n      sameSite: \"lax\"\n    },\n    auth: {\n      bcryptRounds: 12,\n      tokenExpiration: \"24h\"\n    },\n    app: {\n      name: \"TaskFlow Pro\",\n      description: \"Smart Project Management\",\n      version: \"1.0.0\"\n    },\n    features: {\n      aiAssistant: true,\n      notifications: false,\n      analytics: true\n    }\n  };\n}\n\n// Override with environment variables if they exist\nif (process.env.PORT) {\n  config.server.port = parseInt(process.env.PORT);\n}\n\nif (process.env.SESSION_SECRET) {\n  config.session.secret = process.env.SESSION_SECRET;\n}\n\nif (process.env.NODE_ENV === 'production') {\n  config.session.secure = true;\n  config.database.ssl = true;\n}\n\nexport default config;","size_bytes":2090},"server/db.ts":{"content":"import { drizzle } from 'drizzle-orm/postgres-js';\nimport postgres from 'postgres';\nimport * as schema from '../shared/schema';\nimport * as authSchema from '../shared/auth-schema';\nimport config from './config';\n\n// Создаем подключение к PostgreSQL\nconst connectionString = process.env.DATABASE_URL || 'postgresql://localhost:5432/taskflow';\n\nif (!connectionString) {\n  throw new Error('DATABASE_URL is required');\n}\n\n// Настраиваем клиент postgres\nconst client = postgres(connectionString, {\n  ssl: config.database.ssl ? 'require' : false,\n  max: config.database.maxConnections,\n  idle_timeout: config.database.idleTimeout / 1000, // convert to seconds\n});\n\n// Создаем экземпляр Drizzle с схемой\nexport const db = drizzle(client, { \n  schema: { \n    ...schema, \n    ...authSchema \n  } \n});\n\n// Экспортируем типы\nexport type Database = typeof db;","size_bytes":921},"shared/auth-schema.ts":{"content":"import { pgTable, varchar, timestamp, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table for authentication\nexport const users = pgTable(\"auth_users\", {\n  id: varchar(\"id\").primaryKey().notNull(),\n  email: varchar(\"email\").unique().notNull(),\n  passwordHash: varchar(\"password_hash\").notNull(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  emailVerified: boolean(\"email_verified\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Sessions table\nexport const sessions = pgTable(\"auth_sessions\", {\n  id: varchar(\"id\").primaryKey().notNull(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSessionSchema = createInsertSchema(sessions).omit({\n  createdAt: true,\n});\n\n// Types\nexport type AuthUser = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type AuthSession = typeof sessions.$inferSelect;\nexport type InsertSession = z.infer<typeof insertSessionSchema>;\n\n// Login/Register schemas\nexport const loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(6),\n});\n\nexport const registerSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(6),\n  firstName: z.string().min(1),\n  lastName: z.string().min(1),\n});\n\nexport type LoginData = z.infer<typeof loginSchema>;\nexport type RegisterData = z.infer<typeof registerSchema>;","size_bytes":1849},"client/src/components/auth/auth-page.tsx":{"content":"import { useState } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Kanban } from 'lucide-react';\nimport { LoginForm } from './login-form';\nimport { RegisterForm } from './register-form';\n\nexport function AuthPage() {\n  const [isLogin, setIsLogin] = useState(true);\n\n  return (\n    <div className=\"min-h-screen min-h-[100dvh] w-full bg-gradient-to-br from-blue-50 via-white to-purple-50 dark:from-slate-900 dark:via-slate-800 dark:to-purple-900 flex items-center justify-center p-4 relative\">\n      {/* Background decoration */}\n      <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n        <div className=\"absolute -top-40 -right-40 w-80 h-80 bg-gradient-to-br from-blue-400/20 to-purple-400/20 rounded-full blur-3xl\"></div>\n        <div className=\"absolute -bottom-40 -left-40 w-80 h-80 bg-gradient-to-tr from-cyan-400/20 to-blue-400/20 rounded-full blur-3xl\"></div>\n        <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-gradient-to-r from-indigo-400/10 to-cyan-400/10 rounded-full blur-3xl\"></div>\n      </div>\n\n      <div className=\"w-full max-w-6xl mx-auto grid lg:grid-cols-2 gap-12 items-center relative z-10\">\n        {/* Left side - Branding */}\n        <motion.div \n          initial={{ opacity: 0, x: -50 }}\n          animate={{ opacity: 1, x: 0 }}\n          transition={{ duration: 0.6 }}\n          className=\"text-center lg:text-left\"\n        >\n          <div className=\"flex items-center justify-center lg:justify-start space-x-3 mb-6\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-indigo-500 via-blue-600 to-cyan-500 rounded-2xl flex items-center justify-center shadow-xl\">\n              <Kanban className=\"text-white w-8 h-8\" />\n            </div>\n            <div>\n              <h1 className=\"text-3xl font-bold bg-gradient-to-r from-gray-900 to-gray-700 dark:from-white dark:to-gray-300 bg-clip-text text-transparent\">\n                TaskFlow Pro\n              </h1>\n              <p className=\"text-gray-600 dark:text-gray-400 text-sm\">Smart Project Management</p>\n            </div>\n          </div>\n          \n          <h2 className=\"text-4xl lg:text-5xl font-bold text-gray-900 dark:text-white mb-6 leading-tight\">\n            Streamline Your\n            <span className=\"bg-gradient-to-r from-indigo-500 via-blue-600 to-cyan-500 bg-clip-text text-transparent block\">\n              Project Workflow\n            </span>\n          </h2>\n          \n          <p className=\"text-xl text-gray-600 dark:text-gray-400 mb-8 leading-relaxed\">\n            Powerful Kanban boards with AI assistance, real-time collaboration, \n            and advanced analytics to boost your team's productivity.\n          </p>\n          \n          <div className=\"space-y-4 text-left max-w-md mx-auto lg:mx-0\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-2 h-2 bg-indigo-500 rounded-full\"></div>\n              <span className=\"text-gray-700 dark:text-gray-300\">AI-powered task optimization</span>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n              <span className=\"text-gray-700 dark:text-gray-300\">Real-time drag & drop interface</span>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-2 h-2 bg-cyan-500 rounded-full\"></div>\n              <span className=\"text-gray-700 dark:text-gray-300\">Advanced analytics & reporting</span>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-2 h-2 bg-purple-500 rounded-full\"></div>\n              <span className=\"text-gray-700 dark:text-gray-300\">Multi-device responsive design</span>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* Right side - Auth Forms */}\n        <motion.div \n          initial={{ opacity: 0, x: 50 }}\n          animate={{ opacity: 1, x: 0 }}\n          transition={{ duration: 0.6, delay: 0.2 }}\n          className=\"relative\"\n        >\n          <AnimatePresence mode=\"wait\">\n            {isLogin ? (\n              <LoginForm \n                key=\"login\"\n                onSwitchToRegister={() => setIsLogin(false)} \n              />\n            ) : (\n              <RegisterForm \n                key=\"register\"\n                onSwitchToLogin={() => setIsLogin(true)} \n              />\n            )}\n          </AnimatePresence>\n        </motion.div>\n      </div>\n    </div>\n  );\n}","size_bytes":4565},"client/src/components/auth/auth-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface AuthUser {\n  id: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  profileImageUrl?: string;\n}\n\ninterface AuthContextType {\n  user: AuthUser | null;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  register: (email: string, password: string, firstName: string, lastName: string) => Promise<void>;\n  logout: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const queryClient = useQueryClient();\n  const [isInitialized, setIsInitialized] = useState(false);\n\n  // Получение текущего пользователя\n  const { data: user, isLoading, error } = useQuery({\n    queryKey: ['/api/auth/me'],\n    queryFn: async () => {\n      try {\n        const response = await apiRequest('GET', '/api/auth/me');\n        const data = await response.json();\n        return data.user;\n      } catch (error: any) {\n        if (error.message.includes('401')) {\n          return null; // Не аутентифицирован\n        }\n        throw error;\n      }\n    },\n    retry: false,\n  });\n\n  // Мутация для входа\n  const loginMutation = useMutation({\n    mutationFn: async ({ email, password }: { email: string; password: string }) => {\n      const response = await apiRequest('POST', '/api/auth/login', { email, password });\n      const data = await response.json();\n      return data.user;\n    },\n    onSuccess: (user) => {\n      queryClient.setQueryData(['/api/auth/me'], user);\n      queryClient.invalidateQueries({ queryKey: ['/api/boards'] });\n    },\n  });\n\n  // Мутация для регистрации\n  const registerMutation = useMutation({\n    mutationFn: async ({ \n      email, \n      password, \n      firstName, \n      lastName \n    }: { \n      email: string; \n      password: string; \n      firstName: string; \n      lastName: string; \n    }) => {\n      const response = await apiRequest('POST', '/api/auth/register', {\n        email,\n        password,\n        firstName,\n        lastName,\n      });\n      const data = await response.json();\n      return data.user;\n    },\n    onSuccess: (user) => {\n      queryClient.setQueryData(['/api/auth/me'], user);\n      queryClient.invalidateQueries({ queryKey: ['/api/boards'] });\n    },\n  });\n\n  // Мутация для выхода\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest('POST', '/api/auth/logout');\n    },\n    onSuccess: () => {\n      queryClient.setQueryData(['/api/auth/me'], null);\n      queryClient.clear();\n    },\n  });\n\n  useEffect(() => {\n    if (!isLoading) {\n      setIsInitialized(true);\n    }\n  }, [isLoading]);\n\n  const login = async (email: string, password: string) => {\n    await loginMutation.mutateAsync({ email, password });\n  };\n\n  const register = async (email: string, password: string, firstName: string, lastName: string) => {\n    await registerMutation.mutateAsync({ email, password, firstName, lastName });\n  };\n\n  const logout = async () => {\n    await logoutMutation.mutateAsync();\n  };\n\n  const isAuthenticated = !!user && !error;\n  const contextIsLoading = isLoading || !isInitialized;\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        isLoading: contextIsLoading,\n        isAuthenticated,\n        login,\n        register,\n        logout,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}","size_bytes":3910},"client/src/components/auth/login-form.tsx":{"content":"import { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { LogIn, Mail, Lock, Eye, EyeOff } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useAuth } from './auth-provider';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface LoginFormProps {\n  onSwitchToRegister: () => void;\n}\n\nexport function LoginForm({ onSwitchToRegister }: LoginFormProps) {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  \n  const { login } = useAuth();\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!email || !password) {\n      toast({\n        title: 'Validation Error',\n        description: 'Please fill in all fields',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    setIsLoading(true);\n    \n    try {\n      await login(email, password);\n      toast({\n        title: 'Welcome back!',\n        description: 'You have been successfully logged in.',\n      });\n    } catch (error: any) {\n      toast({\n        title: 'Login Failed',\n        description: error.message || 'Invalid email or password',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      exit={{ opacity: 0, y: -20 }}\n      transition={{ duration: 0.3 }}\n    >\n      <Card className=\"w-full max-w-md mx-auto shadow-2xl border-0 bg-gradient-to-br from-white/95 to-gray-50/95 dark:from-slate-800/95 dark:to-slate-900/95 backdrop-blur-xl\">\n        <CardHeader className=\"text-center space-y-4\">\n          <div className=\"mx-auto w-16 h-16 bg-gradient-to-br from-indigo-500 via-blue-600 to-cyan-500 rounded-2xl flex items-center justify-center shadow-xl\">\n            <LogIn className=\"text-white w-8 h-8\" />\n          </div>\n          <div>\n            <CardTitle className=\"text-2xl font-bold bg-gradient-to-r from-gray-900 to-gray-700 dark:from-white dark:to-gray-300 bg-clip-text text-transparent\">\n              Welcome Back\n            </CardTitle>\n            <CardDescription className=\"text-gray-600 dark:text-gray-400\">\n              Sign in to your TaskFlow Pro account\n            </CardDescription>\n          </div>\n        </CardHeader>\n        \n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                Email\n              </label>\n              <div className=\"relative\">\n                <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                <Input\n                  type=\"email\"\n                  placeholder=\"Enter your email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  className=\"pl-10 bg-white/50 dark:bg-slate-700/50 border-gray-200/60 dark:border-slate-600/60 focus:border-blue-400 dark:focus:border-cyan-400\"\n                  disabled={isLoading}\n                />\n              </div>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                Password\n              </label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                <Input\n                  type={showPassword ? 'text' : 'password'}\n                  placeholder=\"Enter your password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  className=\"pl-10 pr-10 bg-white/50 dark:bg-slate-700/50 border-gray-200/60 dark:border-slate-600/60 focus:border-blue-400 dark:focus:border-cyan-400\"\n                  disabled={isLoading}\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300\"\n                  disabled={isLoading}\n                >\n                  {showPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                </button>\n              </div>\n            </div>\n\n            <Button\n              type=\"submit\"\n              disabled={isLoading}\n              className=\"w-full bg-gradient-to-r from-indigo-500 via-blue-600 to-cyan-500 hover:from-indigo-600 hover:via-blue-700 hover:to-cyan-600 text-white font-medium py-2.5 rounded-xl shadow-lg hover:shadow-xl transition-all duration-200\"\n            >\n              {isLoading ? (\n                <motion.div\n                  animate={{ rotate: 360 }}\n                  transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n                  className=\"w-5 h-5 border-2 border-white/30 border-t-white rounded-full\"\n                />\n              ) : (\n                <>\n                  <LogIn className=\"w-4 h-4 mr-2\" />\n                  Sign In\n                </>\n              )}\n            </Button>\n          </form>\n          \n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n              Don't have an account?{' '}\n              <button\n                onClick={onSwitchToRegister}\n                className=\"font-medium text-blue-600 dark:text-cyan-400 hover:underline\"\n                disabled={isLoading}\n              >\n                Sign up\n              </button>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </motion.div>\n  );\n}","size_bytes":6097},"client/src/components/auth/register-form.tsx":{"content":"import { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { UserPlus, Mail, Lock, User, Eye, EyeOff } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useAuth } from './auth-provider';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface RegisterFormProps {\n  onSwitchToLogin: () => void;\n}\n\nexport function RegisterForm({ onSwitchToLogin }: RegisterFormProps) {\n  const [formData, setFormData] = useState({\n    firstName: '',\n    lastName: '',\n    email: '',\n    password: '',\n  });\n  const [showPassword, setShowPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  \n  const { register } = useAuth();\n  const { toast } = useToast();\n\n  const handleChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const { firstName, lastName, email, password } = formData;\n    \n    if (!firstName || !lastName || !email || !password) {\n      toast({\n        title: 'Validation Error',\n        description: 'Please fill in all fields',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    if (password.length < 6) {\n      toast({\n        title: 'Password Too Short',\n        description: 'Password must be at least 6 characters long',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    setIsLoading(true);\n    \n    try {\n      await register(email, password, firstName, lastName);\n      toast({\n        title: 'Account Created!',\n        description: 'Welcome to TaskFlow Pro. You can now start managing your projects.',\n      });\n    } catch (error: any) {\n      toast({\n        title: 'Registration Failed',\n        description: error.message || 'Failed to create account',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      exit={{ opacity: 0, y: -20 }}\n      transition={{ duration: 0.3 }}\n    >\n      <Card className=\"w-full max-w-md mx-auto shadow-2xl border-0 bg-gradient-to-br from-white/95 to-gray-50/95 dark:from-slate-800/95 dark:to-slate-900/95 backdrop-blur-xl\">\n        <CardHeader className=\"text-center space-y-4\">\n          <div className=\"mx-auto w-16 h-16 bg-gradient-to-br from-indigo-500 via-blue-600 to-cyan-500 rounded-2xl flex items-center justify-center shadow-xl\">\n            <UserPlus className=\"text-white w-8 h-8\" />\n          </div>\n          <div>\n            <CardTitle className=\"text-2xl font-bold bg-gradient-to-r from-gray-900 to-gray-700 dark:from-white dark:to-gray-300 bg-clip-text text-transparent\">\n              Create Account\n            </CardTitle>\n            <CardDescription className=\"text-gray-600 dark:text-gray-400\">\n              Join TaskFlow Pro and start managing your projects\n            </CardDescription>\n          </div>\n        </CardHeader>\n        \n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-3\">\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                  First Name\n                </label>\n                <div className=\"relative\">\n                  <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                  <Input\n                    type=\"text\"\n                    placeholder=\"John\"\n                    value={formData.firstName}\n                    onChange={(e) => handleChange('firstName', e.target.value)}\n                    className=\"pl-10 bg-white/50 dark:bg-slate-700/50 border-gray-200/60 dark:border-slate-600/60 focus:border-blue-400 dark:focus:border-cyan-400\"\n                    disabled={isLoading}\n                  />\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                  Last Name\n                </label>\n                <div className=\"relative\">\n                  <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                  <Input\n                    type=\"text\"\n                    placeholder=\"Doe\"\n                    value={formData.lastName}\n                    onChange={(e) => handleChange('lastName', e.target.value)}\n                    className=\"pl-10 bg-white/50 dark:bg-slate-700/50 border-gray-200/60 dark:border-slate-600/60 focus:border-blue-400 dark:focus:border-cyan-400\"\n                    disabled={isLoading}\n                  />\n                </div>\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                Email\n              </label>\n              <div className=\"relative\">\n                <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                <Input\n                  type=\"email\"\n                  placeholder=\"john@example.com\"\n                  value={formData.email}\n                  onChange={(e) => handleChange('email', e.target.value)}\n                  className=\"pl-10 bg-white/50 dark:bg-slate-700/50 border-gray-200/60 dark:border-slate-600/60 focus:border-blue-400 dark:focus:border-cyan-400\"\n                  disabled={isLoading}\n                />\n              </div>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                Password\n              </label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                <Input\n                  type={showPassword ? 'text' : 'password'}\n                  placeholder=\"At least 6 characters\"\n                  value={formData.password}\n                  onChange={(e) => handleChange('password', e.target.value)}\n                  className=\"pl-10 pr-10 bg-white/50 dark:bg-slate-700/50 border-gray-200/60 dark:border-slate-600/60 focus:border-blue-400 dark:focus:border-cyan-400\"\n                  disabled={isLoading}\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300\"\n                  disabled={isLoading}\n                >\n                  {showPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                </button>\n              </div>\n              <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                Must be at least 6 characters long\n              </p>\n            </div>\n\n            <Button\n              type=\"submit\"\n              disabled={isLoading}\n              className=\"w-full bg-gradient-to-r from-indigo-500 via-blue-600 to-cyan-500 hover:from-indigo-600 hover:via-blue-700 hover:to-cyan-600 text-white font-medium py-2.5 rounded-xl shadow-lg hover:shadow-xl transition-all duration-200\"\n            >\n              {isLoading ? (\n                <motion.div\n                  animate={{ rotate: 360 }}\n                  transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n                  className=\"w-5 h-5 border-2 border-white/30 border-t-white rounded-full\"\n                />\n              ) : (\n                <>\n                  <UserPlus className=\"w-4 h-4 mr-2\" />\n                  Create Account\n                </>\n              )}\n            </Button>\n          </form>\n          \n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n              Already have an account?{' '}\n              <button\n                onClick={onSwitchToLogin}\n                className=\"font-medium text-blue-600 dark:text-cyan-400 hover:underline\"\n                disabled={isLoading}\n              >\n                Sign in\n              </button>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </motion.div>\n  );\n}","size_bytes":8599},"client/src/components/kanban/create-column-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Plus } from \"lucide-react\";\n\ninterface CreateColumnModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onCreateColumn: (title: string) => void;\n}\n\nexport function CreateColumnModal({ isOpen, onClose, onCreateColumn }: CreateColumnModalProps) {\n  const [title, setTitle] = useState(\"\");\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (title.trim()) {\n      onCreateColumn(title.trim());\n      setTitle(\"\");\n      onClose();\n    }\n  };\n\n  const handleClose = () => {\n    setTitle(\"\");\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-md\" data-testid=\"create-column-modal\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Plus className=\"h-5 w-5\" />\n            Create New Column\n          </DialogTitle>\n          <DialogDescription>\n            Create a new column to organize your tasks.\n          </DialogDescription>\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <label htmlFor=\"column-title\" className=\"block text-sm font-medium mb-2\">\n              Column Title *\n            </label>\n            <Input\n              id=\"column-title\"\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n              placeholder=\"Enter column title...\"\n              data-testid=\"input-column-title\"\n              autoFocus\n            />\n          </div>\n\n          <div className=\"flex justify-end gap-2 pt-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={handleClose}\n              data-testid=\"button-cancel-column\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={!title.trim()}\n              data-testid=\"button-create-column\"\n            >\n              Create Column\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":2312},"client/src/components/kanban/create-task-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Plus } from \"lucide-react\";\n\ninterface CreateTaskModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onCreateTask: (taskData: {\n    title: string;\n    description?: string;\n    priority: string;\n    columnId: string;\n  }) => void;\n  columnId: string;\n}\n\nexport function CreateTaskModal({ isOpen, onClose, onCreateTask, columnId }: CreateTaskModalProps) {\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [priority, setPriority] = useState(\"medium\");\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (title.trim()) {\n      onCreateTask({\n        title: title.trim(),\n        description: description.trim() || undefined,\n        priority,\n        columnId,\n      });\n      // Reset form\n      setTitle(\"\");\n      setDescription(\"\");\n      setPriority(\"medium\");\n      onClose();\n    }\n  };\n\n  const handleClose = () => {\n    // Reset form when closing\n    setTitle(\"\");\n    setDescription(\"\");\n    setPriority(\"medium\");\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-md\" data-testid=\"create-task-modal\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Plus className=\"h-5 w-5\" />\n            Create New Task\n          </DialogTitle>\n          <DialogDescription>\n            Create a new task with title, description, and priority level.\n          </DialogDescription>\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <label htmlFor=\"task-title\" className=\"block text-sm font-medium mb-2\">\n              Task Title *\n            </label>\n            <Input\n              id=\"task-title\"\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n              placeholder=\"Enter task title...\"\n              data-testid=\"input-task-title\"\n              autoFocus\n            />\n          </div>\n\n          <div>\n            <label htmlFor=\"task-description\" className=\"block text-sm font-medium mb-2\">\n              Description (optional)\n            </label>\n            <Textarea\n              id=\"task-description\"\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n              placeholder=\"Add task description...\"\n              rows={3}\n              data-testid=\"textarea-task-description\"\n            />\n          </div>\n\n          <div>\n            <label htmlFor=\"task-priority\" className=\"block text-sm font-medium mb-2\">\n              Priority\n            </label>\n            <Select value={priority} onValueChange={setPriority}>\n              <SelectTrigger data-testid=\"select-task-priority\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"low\">Low Priority</SelectItem>\n                <SelectItem value=\"medium\">Medium Priority</SelectItem>\n                <SelectItem value=\"high\">High Priority</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"flex justify-end gap-2 pt-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={handleClose}\n              data-testid=\"button-cancel-task\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={!title.trim()}\n              data-testid=\"button-create-task\"\n            >\n              Create Task\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":4087}}}